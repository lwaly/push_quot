// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* ulogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ulogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ulogin_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ulogin_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ulogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ulogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* ulogout_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ulogout_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* forced_offline_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  forced_offline_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuotConfigGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuotConfigGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuotConfigGetRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuotConfigGetRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2eproto() {
  protobuf_AddDesc_protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ulogin_descriptor_ = file->message_type(0);
  static const int ulogin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin, auth_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin, client_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin, ser_nodeidentify_),
  };
  ulogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ulogin_descriptor_,
      ulogin::default_instance_,
      ulogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ulogin));
  ulogin_ack_descriptor_ = file->message_type(1);
  static const int ulogin_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin_ack, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin_ack, beat_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin_ack, login_prompt_),
  };
  ulogin_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ulogin_ack_descriptor_,
      ulogin_ack::default_instance_,
      ulogin_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogin_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ulogin_ack));
  ulogout_descriptor_ = file->message_type(2);
  static const int ulogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogout, uid_),
  };
  ulogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ulogout_descriptor_,
      ulogout::default_instance_,
      ulogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ulogout));
  ulogout_ack_descriptor_ = file->message_type(3);
  static const int ulogout_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogout_ack, error_),
  };
  ulogout_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ulogout_ack_descriptor_,
      ulogout_ack::default_instance_,
      ulogout_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogout_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ulogout_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ulogout_ack));
  forced_offline_ntf_descriptor_ = file->message_type(4);
  static const int forced_offline_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forced_offline_ntf, error_),
  };
  forced_offline_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      forced_offline_ntf_descriptor_,
      forced_offline_ntf::default_instance_,
      forced_offline_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forced_offline_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forced_offline_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(forced_offline_ntf));
  QuotConfigGetReq_descriptor_ = file->message_type(5);
  static const int QuotConfigGetReq_offsets_[1] = {
  };
  QuotConfigGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuotConfigGetReq_descriptor_,
      QuotConfigGetReq::default_instance_,
      QuotConfigGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuotConfigGetReq));
  QuotConfigGetRes_descriptor_ = file->message_type(6);
  static const int QuotConfigGetRes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetRes, errinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetRes, supports_search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetRes, supports_group_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetRes, supported_resolutions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetRes, supports_marks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetRes, supports_time_),
  };
  QuotConfigGetRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuotConfigGetRes_descriptor_,
      QuotConfigGetRes::default_instance_,
      QuotConfigGetRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotConfigGetRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuotConfigGetRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ulogin_descriptor_, &ulogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ulogin_ack_descriptor_, &ulogin_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ulogout_descriptor_, &ulogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ulogout_ack_descriptor_, &ulogout_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    forced_offline_ntf_descriptor_, &forced_offline_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuotConfigGetReq_descriptor_, &QuotConfigGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuotConfigGetRes_descriptor_, &QuotConfigGetRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2eproto() {
  delete ulogin::default_instance_;
  delete ulogin_reflection_;
  delete ulogin_ack::default_instance_;
  delete ulogin_ack_reflection_;
  delete ulogout::default_instance_;
  delete ulogout_reflection_;
  delete ulogout_ack::default_instance_;
  delete ulogout_ack_reflection_;
  delete forced_offline_ntf::default_instance_;
  delete forced_offline_ntf_reflection_;
  delete QuotConfigGetReq::default_instance_;
  delete QuotConfigGetReq_reflection_;
  delete QuotConfigGetRes::default_instance_;
  delete QuotConfigGetRes_reflection_;
}

void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocol.proto\022\010protocol\032\014common.proto"
    "\"~\n\006ulogin\022\013\n\003uid\030\001 \002(\r\022\021\n\tauth_code\030\002 \002"
    "(\014\022\020\n\010password\030\003 \002(\014\022(\n\013client_info\030\004 \002("
    "\0132\023.common.client_info\022\030\n\020ser_nodeIdenti"
    "fy\030\005 \001(\014\"W\n\nulogin_ack\022 \n\005error\030\001 \002(\0132\021."
    "common.errorinfo\022\021\n\tbeat_time\030\002 \001(\r\022\024\n\014l"
    "ogin_prompt\030\003 \001(\r\"\026\n\007ulogout\022\013\n\003uid\030\001 \002("
    "\r\"/\n\013ulogout_ack\022 \n\005error\030\001 \001(\0132\021.common"
    ".errorinfo\"6\n\022forced_offline_ntf\022 \n\005erro"
    "r\030\001 \001(\0132\021.common.errorinfo\"\022\n\020QuotConfig"
    "GetReq\"\275\001\n\020QuotConfigGetRes\022\"\n\007errinfo\030\001"
    " \002(\0132\021.common.errorinfo\022\027\n\017supports_sear"
    "ch\030\002 \001(\010\022\036\n\026supports_group_request\030\003 \001(\010"
    "\022\035\n\025supported_resolutions\030\004 \001(\t\022\026\n\016suppo"
    "rts_marks\030\005 \001(\010\022\025\n\rsupports_time\030\006 \001(\010", 598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ulogin::default_instance_ = new ulogin();
  ulogin_ack::default_instance_ = new ulogin_ack();
  ulogout::default_instance_ = new ulogout();
  ulogout_ack::default_instance_ = new ulogout_ack();
  forced_offline_ntf::default_instance_ = new forced_offline_ntf();
  QuotConfigGetReq::default_instance_ = new QuotConfigGetReq();
  QuotConfigGetRes::default_instance_ = new QuotConfigGetRes();
  ulogin::default_instance_->InitAsDefaultInstance();
  ulogin_ack::default_instance_->InitAsDefaultInstance();
  ulogout::default_instance_->InitAsDefaultInstance();
  ulogout_ack::default_instance_->InitAsDefaultInstance();
  forced_offline_ntf::default_instance_->InitAsDefaultInstance();
  QuotConfigGetReq::default_instance_->InitAsDefaultInstance();
  QuotConfigGetRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ulogin::kUidFieldNumber;
const int ulogin::kAuthCodeFieldNumber;
const int ulogin::kPasswordFieldNumber;
const int ulogin::kClientInfoFieldNumber;
const int ulogin::kSerNodeIdentifyFieldNumber;
#endif  // !_MSC_VER

ulogin::ulogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ulogin)
}

void ulogin::InitAsDefaultInstance() {
  client_info_ = const_cast< ::common::client_info*>(&::common::client_info::default_instance());
}

ulogin::ulogin(const ulogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ulogin)
}

void ulogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  auth_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_info_ = NULL;
  ser_nodeidentify_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ulogin::~ulogin() {
  // @@protoc_insertion_point(destructor:protocol.ulogin)
  SharedDtor();
}

void ulogin::SharedDtor() {
  if (auth_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_code_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (ser_nodeidentify_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ser_nodeidentify_;
  }
  if (this != default_instance_) {
    delete client_info_;
  }
}

void ulogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ulogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ulogin_descriptor_;
}

const ulogin& ulogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ulogin* ulogin::default_instance_ = NULL;

ulogin* ulogin::New() const {
  return new ulogin;
}

void ulogin::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    uid_ = 0u;
    if (has_auth_code()) {
      if (auth_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        auth_code_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_client_info()) {
      if (client_info_ != NULL) client_info_->::common::client_info::Clear();
    }
    if (has_ser_nodeidentify()) {
      if (ser_nodeidentify_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ser_nodeidentify_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ulogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ulogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_auth_code;
        break;
      }

      // required bytes auth_code = 2;
      case 2: {
        if (tag == 18) {
         parse_auth_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required bytes password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_info;
        break;
      }

      // required .common.client_info client_info = 4;
      case 4: {
        if (tag == 34) {
         parse_client_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ser_nodeIdentify;
        break;
      }

      // optional bytes ser_nodeIdentify = 5;
      case 5: {
        if (tag == 42) {
         parse_ser_nodeIdentify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ser_nodeidentify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ulogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ulogin)
  return false;
#undef DO_
}

void ulogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ulogin)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required bytes auth_code = 2;
  if (has_auth_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->auth_code(), output);
  }

  // required bytes password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->password(), output);
  }

  // required .common.client_info client_info = 4;
  if (has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->client_info(), output);
  }

  // optional bytes ser_nodeIdentify = 5;
  if (has_ser_nodeidentify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->ser_nodeidentify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ulogin)
}

::google::protobuf::uint8* ulogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ulogin)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required bytes auth_code = 2;
  if (has_auth_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->auth_code(), target);
  }

  // required bytes password = 3;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->password(), target);
  }

  // required .common.client_info client_info = 4;
  if (has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->client_info(), target);
  }

  // optional bytes ser_nodeIdentify = 5;
  if (has_ser_nodeidentify()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ser_nodeidentify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ulogin)
  return target;
}

int ulogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required bytes auth_code = 2;
    if (has_auth_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->auth_code());
    }

    // required bytes password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // required .common.client_info client_info = 4;
    if (has_client_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_info());
    }

    // optional bytes ser_nodeIdentify = 5;
    if (has_ser_nodeidentify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ser_nodeidentify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ulogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ulogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ulogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ulogin::MergeFrom(const ulogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_auth_code()) {
      set_auth_code(from.auth_code());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_client_info()) {
      mutable_client_info()->::common::client_info::MergeFrom(from.client_info());
    }
    if (from.has_ser_nodeidentify()) {
      set_ser_nodeidentify(from.ser_nodeidentify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ulogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ulogin::CopyFrom(const ulogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ulogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_client_info()) {
    if (!this->client_info().IsInitialized()) return false;
  }
  return true;
}

void ulogin::Swap(ulogin* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(auth_code_, other->auth_code_);
    std::swap(password_, other->password_);
    std::swap(client_info_, other->client_info_);
    std::swap(ser_nodeidentify_, other->ser_nodeidentify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ulogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ulogin_descriptor_;
  metadata.reflection = ulogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ulogin_ack::kErrorFieldNumber;
const int ulogin_ack::kBeatTimeFieldNumber;
const int ulogin_ack::kLoginPromptFieldNumber;
#endif  // !_MSC_VER

ulogin_ack::ulogin_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ulogin_ack)
}

void ulogin_ack::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

ulogin_ack::ulogin_ack(const ulogin_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ulogin_ack)
}

void ulogin_ack::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  beat_time_ = 0u;
  login_prompt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ulogin_ack::~ulogin_ack() {
  // @@protoc_insertion_point(destructor:protocol.ulogin_ack)
  SharedDtor();
}

void ulogin_ack::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ulogin_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ulogin_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ulogin_ack_descriptor_;
}

const ulogin_ack& ulogin_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ulogin_ack* ulogin_ack::default_instance_ = NULL;

ulogin_ack* ulogin_ack::New() const {
  return new ulogin_ack;
}

void ulogin_ack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ulogin_ack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(beat_time_, login_prompt_);
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ulogin_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ulogin_ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_beat_time;
        break;
      }

      // optional uint32 beat_time = 2;
      case 2: {
        if (tag == 16) {
         parse_beat_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beat_time_)));
          set_has_beat_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_login_prompt;
        break;
      }

      // optional uint32 login_prompt = 3;
      case 3: {
        if (tag == 24) {
         parse_login_prompt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_prompt_)));
          set_has_login_prompt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ulogin_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ulogin_ack)
  return false;
#undef DO_
}

void ulogin_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ulogin_ack)
  // required .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // optional uint32 beat_time = 2;
  if (has_beat_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beat_time(), output);
  }

  // optional uint32 login_prompt = 3;
  if (has_login_prompt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->login_prompt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ulogin_ack)
}

::google::protobuf::uint8* ulogin_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ulogin_ack)
  // required .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // optional uint32 beat_time = 2;
  if (has_beat_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beat_time(), target);
  }

  // optional uint32 login_prompt = 3;
  if (has_login_prompt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->login_prompt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ulogin_ack)
  return target;
}

int ulogin_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional uint32 beat_time = 2;
    if (has_beat_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beat_time());
    }

    // optional uint32 login_prompt = 3;
    if (has_login_prompt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_prompt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ulogin_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ulogin_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ulogin_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ulogin_ack::MergeFrom(const ulogin_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (from.has_beat_time()) {
      set_beat_time(from.beat_time());
    }
    if (from.has_login_prompt()) {
      set_login_prompt(from.login_prompt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ulogin_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ulogin_ack::CopyFrom(const ulogin_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ulogin_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void ulogin_ack::Swap(ulogin_ack* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(beat_time_, other->beat_time_);
    std::swap(login_prompt_, other->login_prompt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ulogin_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ulogin_ack_descriptor_;
  metadata.reflection = ulogin_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ulogout::kUidFieldNumber;
#endif  // !_MSC_VER

ulogout::ulogout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ulogout)
}

void ulogout::InitAsDefaultInstance() {
}

ulogout::ulogout(const ulogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ulogout)
}

void ulogout::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ulogout::~ulogout() {
  // @@protoc_insertion_point(destructor:protocol.ulogout)
  SharedDtor();
}

void ulogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ulogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ulogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ulogout_descriptor_;
}

const ulogout& ulogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ulogout* ulogout::default_instance_ = NULL;

ulogout* ulogout::New() const {
  return new ulogout;
}

void ulogout::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ulogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ulogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ulogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ulogout)
  return false;
#undef DO_
}

void ulogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ulogout)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ulogout)
}

::google::protobuf::uint8* ulogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ulogout)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ulogout)
  return target;
}

int ulogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ulogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ulogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ulogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ulogout::MergeFrom(const ulogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ulogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ulogout::CopyFrom(const ulogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ulogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ulogout::Swap(ulogout* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ulogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ulogout_descriptor_;
  metadata.reflection = ulogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ulogout_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

ulogout_ack::ulogout_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ulogout_ack)
}

void ulogout_ack::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

ulogout_ack::ulogout_ack(const ulogout_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ulogout_ack)
}

void ulogout_ack::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ulogout_ack::~ulogout_ack() {
  // @@protoc_insertion_point(destructor:protocol.ulogout_ack)
  SharedDtor();
}

void ulogout_ack::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ulogout_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ulogout_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ulogout_ack_descriptor_;
}

const ulogout_ack& ulogout_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ulogout_ack* ulogout_ack::default_instance_ = NULL;

ulogout_ack* ulogout_ack::New() const {
  return new ulogout_ack;
}

void ulogout_ack::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ulogout_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ulogout_ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ulogout_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ulogout_ack)
  return false;
#undef DO_
}

void ulogout_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ulogout_ack)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ulogout_ack)
}

::google::protobuf::uint8* ulogout_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ulogout_ack)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ulogout_ack)
  return target;
}

int ulogout_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ulogout_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ulogout_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ulogout_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ulogout_ack::MergeFrom(const ulogout_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ulogout_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ulogout_ack::CopyFrom(const ulogout_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ulogout_ack::IsInitialized() const {

  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void ulogout_ack::Swap(ulogout_ack* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ulogout_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ulogout_ack_descriptor_;
  metadata.reflection = ulogout_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int forced_offline_ntf::kErrorFieldNumber;
#endif  // !_MSC_VER

forced_offline_ntf::forced_offline_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.forced_offline_ntf)
}

void forced_offline_ntf::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

forced_offline_ntf::forced_offline_ntf(const forced_offline_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.forced_offline_ntf)
}

void forced_offline_ntf::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

forced_offline_ntf::~forced_offline_ntf() {
  // @@protoc_insertion_point(destructor:protocol.forced_offline_ntf)
  SharedDtor();
}

void forced_offline_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void forced_offline_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* forced_offline_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return forced_offline_ntf_descriptor_;
}

const forced_offline_ntf& forced_offline_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

forced_offline_ntf* forced_offline_ntf::default_instance_ = NULL;

forced_offline_ntf* forced_offline_ntf::New() const {
  return new forced_offline_ntf;
}

void forced_offline_ntf::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool forced_offline_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.forced_offline_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.forced_offline_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.forced_offline_ntf)
  return false;
#undef DO_
}

void forced_offline_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.forced_offline_ntf)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.forced_offline_ntf)
}

::google::protobuf::uint8* forced_offline_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.forced_offline_ntf)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.forced_offline_ntf)
  return target;
}

int forced_offline_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void forced_offline_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const forced_offline_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const forced_offline_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void forced_offline_ntf::MergeFrom(const forced_offline_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void forced_offline_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void forced_offline_ntf::CopyFrom(const forced_offline_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forced_offline_ntf::IsInitialized() const {

  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void forced_offline_ntf::Swap(forced_offline_ntf* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata forced_offline_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = forced_offline_ntf_descriptor_;
  metadata.reflection = forced_offline_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuotConfigGetReq::QuotConfigGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.QuotConfigGetReq)
}

void QuotConfigGetReq::InitAsDefaultInstance() {
}

QuotConfigGetReq::QuotConfigGetReq(const QuotConfigGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.QuotConfigGetReq)
}

void QuotConfigGetReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotConfigGetReq::~QuotConfigGetReq() {
  // @@protoc_insertion_point(destructor:protocol.QuotConfigGetReq)
  SharedDtor();
}

void QuotConfigGetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuotConfigGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuotConfigGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotConfigGetReq_descriptor_;
}

const QuotConfigGetReq& QuotConfigGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

QuotConfigGetReq* QuotConfigGetReq::default_instance_ = NULL;

QuotConfigGetReq* QuotConfigGetReq::New() const {
  return new QuotConfigGetReq;
}

void QuotConfigGetReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuotConfigGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.QuotConfigGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.QuotConfigGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.QuotConfigGetReq)
  return false;
#undef DO_
}

void QuotConfigGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.QuotConfigGetReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.QuotConfigGetReq)
}

::google::protobuf::uint8* QuotConfigGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.QuotConfigGetReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.QuotConfigGetReq)
  return target;
}

int QuotConfigGetReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotConfigGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuotConfigGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuotConfigGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuotConfigGetReq::MergeFrom(const QuotConfigGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuotConfigGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotConfigGetReq::CopyFrom(const QuotConfigGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotConfigGetReq::IsInitialized() const {

  return true;
}

void QuotConfigGetReq::Swap(QuotConfigGetReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuotConfigGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuotConfigGetReq_descriptor_;
  metadata.reflection = QuotConfigGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuotConfigGetRes::kErrinfoFieldNumber;
const int QuotConfigGetRes::kSupportsSearchFieldNumber;
const int QuotConfigGetRes::kSupportsGroupRequestFieldNumber;
const int QuotConfigGetRes::kSupportedResolutionsFieldNumber;
const int QuotConfigGetRes::kSupportsMarksFieldNumber;
const int QuotConfigGetRes::kSupportsTimeFieldNumber;
#endif  // !_MSC_VER

QuotConfigGetRes::QuotConfigGetRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.QuotConfigGetRes)
}

void QuotConfigGetRes::InitAsDefaultInstance() {
  errinfo_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

QuotConfigGetRes::QuotConfigGetRes(const QuotConfigGetRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.QuotConfigGetRes)
}

void QuotConfigGetRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errinfo_ = NULL;
  supports_search_ = false;
  supports_group_request_ = false;
  supported_resolutions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supports_marks_ = false;
  supports_time_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotConfigGetRes::~QuotConfigGetRes() {
  // @@protoc_insertion_point(destructor:protocol.QuotConfigGetRes)
  SharedDtor();
}

void QuotConfigGetRes::SharedDtor() {
  if (supported_resolutions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete supported_resolutions_;
  }
  if (this != default_instance_) {
    delete errinfo_;
  }
}

void QuotConfigGetRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuotConfigGetRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotConfigGetRes_descriptor_;
}

const QuotConfigGetRes& QuotConfigGetRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

QuotConfigGetRes* QuotConfigGetRes::default_instance_ = NULL;

QuotConfigGetRes* QuotConfigGetRes::New() const {
  return new QuotConfigGetRes;
}

void QuotConfigGetRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuotConfigGetRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(supports_search_, supports_time_);
    if (has_errinfo()) {
      if (errinfo_ != NULL) errinfo_->::common::errorinfo::Clear();
    }
    if (has_supported_resolutions()) {
      if (supported_resolutions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        supported_resolutions_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuotConfigGetRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.QuotConfigGetRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo errinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_supports_search;
        break;
      }

      // optional bool supports_search = 2;
      case 2: {
        if (tag == 16) {
         parse_supports_search:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_search_)));
          set_has_supports_search();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_supports_group_request;
        break;
      }

      // optional bool supports_group_request = 3;
      case 3: {
        if (tag == 24) {
         parse_supports_group_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_group_request_)));
          set_has_supports_group_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_supported_resolutions;
        break;
      }

      // optional string supported_resolutions = 4;
      case 4: {
        if (tag == 34) {
         parse_supported_resolutions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_supported_resolutions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->supported_resolutions().data(), this->supported_resolutions().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "supported_resolutions");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_supports_marks;
        break;
      }

      // optional bool supports_marks = 5;
      case 5: {
        if (tag == 40) {
         parse_supports_marks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_marks_)));
          set_has_supports_marks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_supports_time;
        break;
      }

      // optional bool supports_time = 6;
      case 6: {
        if (tag == 48) {
         parse_supports_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_time_)));
          set_has_supports_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.QuotConfigGetRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.QuotConfigGetRes)
  return false;
#undef DO_
}

void QuotConfigGetRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.QuotConfigGetRes)
  // required .common.errorinfo errinfo = 1;
  if (has_errinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->errinfo(), output);
  }

  // optional bool supports_search = 2;
  if (has_supports_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->supports_search(), output);
  }

  // optional bool supports_group_request = 3;
  if (has_supports_group_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->supports_group_request(), output);
  }

  // optional string supported_resolutions = 4;
  if (has_supported_resolutions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->supported_resolutions().data(), this->supported_resolutions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "supported_resolutions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->supported_resolutions(), output);
  }

  // optional bool supports_marks = 5;
  if (has_supports_marks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->supports_marks(), output);
  }

  // optional bool supports_time = 6;
  if (has_supports_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->supports_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.QuotConfigGetRes)
}

::google::protobuf::uint8* QuotConfigGetRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.QuotConfigGetRes)
  // required .common.errorinfo errinfo = 1;
  if (has_errinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->errinfo(), target);
  }

  // optional bool supports_search = 2;
  if (has_supports_search()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->supports_search(), target);
  }

  // optional bool supports_group_request = 3;
  if (has_supports_group_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->supports_group_request(), target);
  }

  // optional string supported_resolutions = 4;
  if (has_supported_resolutions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->supported_resolutions().data(), this->supported_resolutions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "supported_resolutions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->supported_resolutions(), target);
  }

  // optional bool supports_marks = 5;
  if (has_supports_marks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->supports_marks(), target);
  }

  // optional bool supports_time = 6;
  if (has_supports_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->supports_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.QuotConfigGetRes)
  return target;
}

int QuotConfigGetRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.errorinfo errinfo = 1;
    if (has_errinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errinfo());
    }

    // optional bool supports_search = 2;
    if (has_supports_search()) {
      total_size += 1 + 1;
    }

    // optional bool supports_group_request = 3;
    if (has_supports_group_request()) {
      total_size += 1 + 1;
    }

    // optional string supported_resolutions = 4;
    if (has_supported_resolutions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->supported_resolutions());
    }

    // optional bool supports_marks = 5;
    if (has_supports_marks()) {
      total_size += 1 + 1;
    }

    // optional bool supports_time = 6;
    if (has_supports_time()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotConfigGetRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuotConfigGetRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuotConfigGetRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuotConfigGetRes::MergeFrom(const QuotConfigGetRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errinfo()) {
      mutable_errinfo()->::common::errorinfo::MergeFrom(from.errinfo());
    }
    if (from.has_supports_search()) {
      set_supports_search(from.supports_search());
    }
    if (from.has_supports_group_request()) {
      set_supports_group_request(from.supports_group_request());
    }
    if (from.has_supported_resolutions()) {
      set_supported_resolutions(from.supported_resolutions());
    }
    if (from.has_supports_marks()) {
      set_supports_marks(from.supports_marks());
    }
    if (from.has_supports_time()) {
      set_supports_time(from.supports_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuotConfigGetRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotConfigGetRes::CopyFrom(const QuotConfigGetRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotConfigGetRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_errinfo()) {
    if (!this->errinfo().IsInitialized()) return false;
  }
  return true;
}

void QuotConfigGetRes::Swap(QuotConfigGetRes* other) {
  if (other != this) {
    std::swap(errinfo_, other->errinfo_);
    std::swap(supports_search_, other->supports_search_);
    std::swap(supports_group_request_, other->supports_group_request_);
    std::swap(supported_resolutions_, other->supported_resolutions_);
    std::swap(supports_marks_, other->supports_marks_);
    std::swap(supports_time_, other->supports_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuotConfigGetRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuotConfigGetRes_descriptor_;
  metadata.reflection = QuotConfigGetRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
