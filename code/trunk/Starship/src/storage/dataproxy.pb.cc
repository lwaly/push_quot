// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataproxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dataproxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataMem {

namespace {

const ::google::protobuf::Descriptor* MemOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemOperate_RedisOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemOperate_RedisOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MemOperate_RedisOperate_OPERATE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemOperate_DbOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemOperate_DbOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemOperate_DbOperate_Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemOperate_DbOperate_Condition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MemOperate_DbOperate_Condition_E_RELATION_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemOperate_DbOperate_ConditionGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemOperate_DbOperate_ConditionGroup_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MemOperate_DbOperate_ConditionGroup_E_RELATION_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemOperate_DbOperate_OrderBy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemOperate_DbOperate_OrderBy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MemOperate_DbOperate_OrderBy_E_RELATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MemOperate_DbOperate_E_QUERY_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemRsp_DataLocate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemRsp_DataLocate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MemRsp_E_RESULT_FROM_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_COL_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dataproxy_2eproto() {
  protobuf_AddDesc_dataproxy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dataproxy.proto");
  GOOGLE_CHECK(file != NULL);
  MemOperate_descriptor_ = file->message_type(0);
  static const int MemOperate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate, section_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate, redis_operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate, db_operate_),
  };
  MemOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemOperate_descriptor_,
      MemOperate::default_instance_,
      MemOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemOperate));
  MemOperate_RedisOperate_descriptor_ = MemOperate_descriptor_->nested_type(0);
  static const int MemOperate_RedisOperate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, key_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, redis_cmd_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, redis_cmd_write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, key_ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, redis_structure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, data_purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, hash_key_),
  };
  MemOperate_RedisOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemOperate_RedisOperate_descriptor_,
      MemOperate_RedisOperate::default_instance_,
      MemOperate_RedisOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_RedisOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemOperate_RedisOperate));
  MemOperate_RedisOperate_OPERATE_TYPE_descriptor_ = MemOperate_RedisOperate_descriptor_->enum_type(0);
  MemOperate_DbOperate_descriptor_ = MemOperate_descriptor_->nested_type(1);
  static const int MemOperate_DbOperate_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, query_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, groupby_col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, orderby_col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, group_relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, limit_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, mod_factor_),
  };
  MemOperate_DbOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemOperate_DbOperate_descriptor_,
      MemOperate_DbOperate::default_instance_,
      MemOperate_DbOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemOperate_DbOperate));
  MemOperate_DbOperate_Condition_descriptor_ = MemOperate_DbOperate_descriptor_->nested_type(0);
  static const int MemOperate_DbOperate_Condition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_Condition, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_Condition, col_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_Condition, col_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_Condition, col_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_Condition, col_name_right_),
  };
  MemOperate_DbOperate_Condition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemOperate_DbOperate_Condition_descriptor_,
      MemOperate_DbOperate_Condition::default_instance_,
      MemOperate_DbOperate_Condition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_Condition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_Condition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemOperate_DbOperate_Condition));
  MemOperate_DbOperate_Condition_E_RELATION_descriptor_ = MemOperate_DbOperate_Condition_descriptor_->enum_type(0);
  MemOperate_DbOperate_ConditionGroup_descriptor_ = MemOperate_DbOperate_descriptor_->nested_type(1);
  static const int MemOperate_DbOperate_ConditionGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_ConditionGroup, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_ConditionGroup, condition_),
  };
  MemOperate_DbOperate_ConditionGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemOperate_DbOperate_ConditionGroup_descriptor_,
      MemOperate_DbOperate_ConditionGroup::default_instance_,
      MemOperate_DbOperate_ConditionGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_ConditionGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_ConditionGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemOperate_DbOperate_ConditionGroup));
  MemOperate_DbOperate_ConditionGroup_E_RELATION_descriptor_ = MemOperate_DbOperate_ConditionGroup_descriptor_->enum_type(0);
  MemOperate_DbOperate_OrderBy_descriptor_ = MemOperate_DbOperate_descriptor_->nested_type(2);
  static const int MemOperate_DbOperate_OrderBy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_OrderBy, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_OrderBy, col_name_),
  };
  MemOperate_DbOperate_OrderBy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemOperate_DbOperate_OrderBy_descriptor_,
      MemOperate_DbOperate_OrderBy::default_instance_,
      MemOperate_DbOperate_OrderBy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_OrderBy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemOperate_DbOperate_OrderBy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemOperate_DbOperate_OrderBy));
  MemOperate_DbOperate_OrderBy_E_RELATION_descriptor_ = MemOperate_DbOperate_OrderBy_descriptor_->enum_type(0);
  MemOperate_DbOperate_E_QUERY_TYPE_descriptor_ = MemOperate_DbOperate_descriptor_->enum_type(0);
  Record_descriptor_ = file->message_type(1);
  static const int Record_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, field_info_),
  };
  Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record));
  Field_descriptor_ = file->message_type(2);
  static const int Field_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, col_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, col_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, col_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, col_as_),
  };
  Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field));
  MemRsp_descriptor_ = file->message_type(3);
  static const int MemRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp, err_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp, curcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp, record_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp, locate_),
  };
  MemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemRsp_descriptor_,
      MemRsp::default_instance_,
      MemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemRsp));
  MemRsp_DataLocate_descriptor_ = MemRsp_descriptor_->nested_type(0);
  static const int MemRsp_DataLocate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp_DataLocate, section_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp_DataLocate, section_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp_DataLocate, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp_DataLocate, divisor_),
  };
  MemRsp_DataLocate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemRsp_DataLocate_descriptor_,
      MemRsp_DataLocate::default_instance_,
      MemRsp_DataLocate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp_DataLocate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemRsp_DataLocate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemRsp_DataLocate));
  MemRsp_E_RESULT_FROM_descriptor_ = MemRsp_descriptor_->enum_type(0);
  E_COL_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dataproxy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemOperate_descriptor_, &MemOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemOperate_RedisOperate_descriptor_, &MemOperate_RedisOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemOperate_DbOperate_descriptor_, &MemOperate_DbOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemOperate_DbOperate_Condition_descriptor_, &MemOperate_DbOperate_Condition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemOperate_DbOperate_ConditionGroup_descriptor_, &MemOperate_DbOperate_ConditionGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemOperate_DbOperate_OrderBy_descriptor_, &MemOperate_DbOperate_OrderBy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemRsp_descriptor_, &MemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemRsp_DataLocate_descriptor_, &MemRsp_DataLocate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dataproxy_2eproto() {
  delete MemOperate::default_instance_;
  delete MemOperate_reflection_;
  delete MemOperate_RedisOperate::default_instance_;
  delete MemOperate_RedisOperate_reflection_;
  delete MemOperate_DbOperate::default_instance_;
  delete MemOperate_DbOperate_reflection_;
  delete MemOperate_DbOperate_Condition::default_instance_;
  delete MemOperate_DbOperate_Condition_reflection_;
  delete MemOperate_DbOperate_ConditionGroup::default_instance_;
  delete MemOperate_DbOperate_ConditionGroup_reflection_;
  delete MemOperate_DbOperate_OrderBy::default_instance_;
  delete MemOperate_DbOperate_OrderBy_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete MemRsp::default_instance_;
  delete MemRsp_reflection_;
  delete MemRsp_DataLocate::default_instance_;
  delete MemRsp_DataLocate_reflection_;
}

void protobuf_AddDesc_dataproxy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017dataproxy.proto\022\007DataMem\"\201\014\n\nMemOperat"
    "e\022\026\n\016section_factor\030\001 \002(\r\0227\n\rredis_opera"
    "te\030\002 \001(\0132 .DataMem.MemOperate.RedisOpera"
    "te\0221\n\ndb_operate\030\003 \001(\0132\035.DataMem.MemOper"
    "ate.DbOperate\032\254\002\n\014RedisOperate\022\020\n\010key_na"
    "me\030\001 \002(\014\022\026\n\016redis_cmd_read\030\002 \002(\t\022\027\n\017redi"
    "s_cmd_write\030\003 \002(\t\022>\n\007op_type\030\004 \002(\0162-.Dat"
    "aMem.MemOperate.RedisOperate.OPERATE_TYP"
    "E\022\036\n\006fields\030\005 \003(\0132\016.DataMem.Field\022\017\n\007key"
    "_ttl\030\006 \001(\005\022\027\n\017redis_structure\030\007 \001(\005\022\024\n\014d"
    "ata_purpose\030\010 \001(\005\022\020\n\010hash_key\030\t \001(\014\"\'\n\014O"
    "PERATE_TYPE\022\n\n\006T_READ\020\001\022\013\n\007T_WRITE\020\002\032\277\010\n"
    "\tDbOperate\022>\n\nquery_type\030\001 \002(\0162*.DataMem"
    ".MemOperate.DbOperate.E_QUERY_TYPE\022\022\n\nta"
    "ble_name\030\002 \002(\t\022\036\n\006fields\030\003 \003(\0132\016.DataMem"
    ".Field\022@\n\nconditions\030\004 \003(\0132,.DataMem.Mem"
    "Operate.DbOperate.ConditionGroup\022\023\n\013grou"
    "pby_col\030\005 \003(\t\022:\n\013orderby_col\030\006 \003(\0132%.Dat"
    "aMem.MemOperate.DbOperate.OrderBy\022O\n\016gro"
    "up_relation\030\007 \001(\01627.DataMem.MemOperate.D"
    "bOperate.ConditionGroup.E_RELATION\022\r\n\005li"
    "mit\030\010 \001(\r\022\022\n\nlimit_from\030\t \001(\r\022\022\n\nmod_fac"
    "tor\030\n \001(\r\032\206\002\n\tCondition\022D\n\010relation\030\001 \002("
    "\01622.DataMem.MemOperate.DbOperate.Conditi"
    "on.E_RELATION\022%\n\010col_type\030\002 \002(\0162\023.DataMe"
    "m.E_COL_TYPE\022\020\n\010col_name\030\003 \002(\t\022\022\n\ncol_va"
    "lues\030\004 \003(\014\022\026\n\016col_name_right\030\005 \001(\t\"N\n\nE_"
    "RELATION\022\006\n\002EQ\020\000\022\006\n\002NE\020\001\022\006\n\002GT\020\002\022\006\n\002LT\020\003"
    "\022\006\n\002GE\020\004\022\006\n\002LE\020\005\022\010\n\004LIKE\020\006\022\006\n\002IN\020\007\032\266\001\n\016C"
    "onditionGroup\022I\n\010relation\030\001 \002(\01627.DataMe"
    "m.MemOperate.DbOperate.ConditionGroup.E_"
    "RELATION\022:\n\tcondition\030\002 \003(\0132\'.DataMem.Me"
    "mOperate.DbOperate.Condition\"\035\n\nE_RELATI"
    "ON\022\007\n\003AND\020\000\022\006\n\002OR\020\001\032\200\001\n\007OrderBy\022B\n\010relat"
    "ion\030\001 \002(\01620.DataMem.MemOperate.DbOperate"
    ".OrderBy.E_RELATION\022\020\n\010col_name\030\002 \002(\t\"\037\n"
    "\nE_RELATION\022\007\n\003ASC\020\000\022\010\n\004DESC\020\001\"^\n\014E_QUER"
    "Y_TYPE\022\n\n\006SELECT\020\000\022\n\n\006INSERT\020\001\022\021\n\rINSERT"
    "_IGNORE\020\002\022\n\n\006UPDATE\020\003\022\013\n\007REPLACE\020\004\022\n\n\006DE"
    "LETE\020\005\",\n\006Record\022\"\n\nfield_info\030\001 \003(\0132\016.D"
    "ataMem.Field\"c\n\005Field\022\020\n\010col_name\030\001 \001(\t\022"
    "%\n\010col_type\030\002 \001(\0162\023.DataMem.E_COL_TYPE\022\021"
    "\n\tcol_value\030\003 \001(\014\022\016\n\006col_as\030\004 \001(\t\"\264\002\n\006Me"
    "mRsp\022\016\n\006err_no\030\001 \002(\005\022\017\n\007err_msg\030\002 \001(\014\022\022\n"
    "\ntotalcount\030\003 \001(\005\022\020\n\010curcount\030\004 \001(\005\022$\n\013r"
    "ecord_data\030\005 \003(\0132\017.DataMem.Record\022\014\n\004fro"
    "m\030\006 \001(\005\022*\n\006locate\030\007 \001(\0132\032.DataMem.MemRsp"
    ".DataLocate\032U\n\nDataLocate\022\024\n\014section_fro"
    "m\030\001 \002(\r\022\022\n\nsection_to\030\002 \002(\r\022\014\n\004hash\030\003 \001("
    "\r\022\017\n\007divisor\030\004 \001(\r\",\n\rE_RESULT_FROM\022\016\n\nF"
    "ROM_REDIS\020\001\022\013\n\007FROM_DB\020\002*D\n\nE_COL_TYPE\022\n"
    "\n\006STRING\020\000\022\007\n\003INT\020\001\022\n\n\006BIGINT\020\002\022\t\n\005FLOAT"
    "\020\003\022\n\n\006DOUBLE\020\004", 2094);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dataproxy.proto", &protobuf_RegisterTypes);
  MemOperate::default_instance_ = new MemOperate();
  MemOperate_RedisOperate::default_instance_ = new MemOperate_RedisOperate();
  MemOperate_DbOperate::default_instance_ = new MemOperate_DbOperate();
  MemOperate_DbOperate_Condition::default_instance_ = new MemOperate_DbOperate_Condition();
  MemOperate_DbOperate_ConditionGroup::default_instance_ = new MemOperate_DbOperate_ConditionGroup();
  MemOperate_DbOperate_OrderBy::default_instance_ = new MemOperate_DbOperate_OrderBy();
  Record::default_instance_ = new Record();
  Field::default_instance_ = new Field();
  MemRsp::default_instance_ = new MemRsp();
  MemRsp_DataLocate::default_instance_ = new MemRsp_DataLocate();
  MemOperate::default_instance_->InitAsDefaultInstance();
  MemOperate_RedisOperate::default_instance_->InitAsDefaultInstance();
  MemOperate_DbOperate::default_instance_->InitAsDefaultInstance();
  MemOperate_DbOperate_Condition::default_instance_->InitAsDefaultInstance();
  MemOperate_DbOperate_ConditionGroup::default_instance_->InitAsDefaultInstance();
  MemOperate_DbOperate_OrderBy::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  MemRsp::default_instance_->InitAsDefaultInstance();
  MemRsp_DataLocate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dataproxy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dataproxy_2eproto {
  StaticDescriptorInitializer_dataproxy_2eproto() {
    protobuf_AddDesc_dataproxy_2eproto();
  }
} static_descriptor_initializer_dataproxy_2eproto_;
const ::google::protobuf::EnumDescriptor* E_COL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_COL_TYPE_descriptor_;
}
bool E_COL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MemOperate_RedisOperate_OPERATE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_RedisOperate_OPERATE_TYPE_descriptor_;
}
bool MemOperate_RedisOperate_OPERATE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MemOperate_RedisOperate_OPERATE_TYPE MemOperate_RedisOperate::T_READ;
const MemOperate_RedisOperate_OPERATE_TYPE MemOperate_RedisOperate::T_WRITE;
const MemOperate_RedisOperate_OPERATE_TYPE MemOperate_RedisOperate::OPERATE_TYPE_MIN;
const MemOperate_RedisOperate_OPERATE_TYPE MemOperate_RedisOperate::OPERATE_TYPE_MAX;
const int MemOperate_RedisOperate::OPERATE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MemOperate_RedisOperate::kKeyNameFieldNumber;
const int MemOperate_RedisOperate::kRedisCmdReadFieldNumber;
const int MemOperate_RedisOperate::kRedisCmdWriteFieldNumber;
const int MemOperate_RedisOperate::kOpTypeFieldNumber;
const int MemOperate_RedisOperate::kFieldsFieldNumber;
const int MemOperate_RedisOperate::kKeyTtlFieldNumber;
const int MemOperate_RedisOperate::kRedisStructureFieldNumber;
const int MemOperate_RedisOperate::kDataPurposeFieldNumber;
const int MemOperate_RedisOperate::kHashKeyFieldNumber;
#endif  // !_MSC_VER

MemOperate_RedisOperate::MemOperate_RedisOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.MemOperate.RedisOperate)
}

void MemOperate_RedisOperate::InitAsDefaultInstance() {
}

MemOperate_RedisOperate::MemOperate_RedisOperate(const MemOperate_RedisOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.MemOperate.RedisOperate)
}

void MemOperate_RedisOperate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redis_cmd_read_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redis_cmd_write_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_ = 1;
  key_ttl_ = 0;
  redis_structure_ = 0;
  data_purpose_ = 0;
  hash_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemOperate_RedisOperate::~MemOperate_RedisOperate() {
  // @@protoc_insertion_point(destructor:DataMem.MemOperate.RedisOperate)
  SharedDtor();
}

void MemOperate_RedisOperate::SharedDtor() {
  if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_name_;
  }
  if (redis_cmd_read_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redis_cmd_read_;
  }
  if (redis_cmd_write_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redis_cmd_write_;
  }
  if (hash_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hash_key_;
  }
  if (this != default_instance_) {
  }
}

void MemOperate_RedisOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemOperate_RedisOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_RedisOperate_descriptor_;
}

const MemOperate_RedisOperate& MemOperate_RedisOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

MemOperate_RedisOperate* MemOperate_RedisOperate::default_instance_ = NULL;

MemOperate_RedisOperate* MemOperate_RedisOperate::New() const {
  return new MemOperate_RedisOperate;
}

void MemOperate_RedisOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemOperate_RedisOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(key_ttl_, data_purpose_);
    if (has_key_name()) {
      if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_name_->clear();
      }
    }
    if (has_redis_cmd_read()) {
      if (redis_cmd_read_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        redis_cmd_read_->clear();
      }
    }
    if (has_redis_cmd_write()) {
      if (redis_cmd_write_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        redis_cmd_write_->clear();
      }
    }
    op_type_ = 1;
  }
  if (has_hash_key()) {
    if (hash_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      hash_key_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemOperate_RedisOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.MemOperate.RedisOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_redis_cmd_read;
        break;
      }

      // required string redis_cmd_read = 2;
      case 2: {
        if (tag == 18) {
         parse_redis_cmd_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redis_cmd_read()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redis_cmd_read().data(), this->redis_cmd_read().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "redis_cmd_read");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_redis_cmd_write;
        break;
      }

      // required string redis_cmd_write = 3;
      case 3: {
        if (tag == 26) {
         parse_redis_cmd_write:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redis_cmd_write()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redis_cmd_write().data(), this->redis_cmd_write().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "redis_cmd_write");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_op_type;
        break;
      }

      // required .DataMem.MemOperate.RedisOperate.OPERATE_TYPE op_type = 4;
      case 4: {
        if (tag == 32) {
         parse_op_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataMem::MemOperate_RedisOperate_OPERATE_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::DataMem::MemOperate_RedisOperate_OPERATE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fields;
        break;
      }

      // repeated .DataMem.Field fields = 5;
      case 5: {
        if (tag == 42) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fields;
        if (input->ExpectTag(48)) goto parse_key_ttl;
        break;
      }

      // optional int32 key_ttl = 6;
      case 6: {
        if (tag == 48) {
         parse_key_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_ttl_)));
          set_has_key_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_redis_structure;
        break;
      }

      // optional int32 redis_structure = 7;
      case 7: {
        if (tag == 56) {
         parse_redis_structure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redis_structure_)));
          set_has_redis_structure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_data_purpose;
        break;
      }

      // optional int32 data_purpose = 8;
      case 8: {
        if (tag == 64) {
         parse_data_purpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_purpose_)));
          set_has_data_purpose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_hash_key;
        break;
      }

      // optional bytes hash_key = 9;
      case 9: {
        if (tag == 74) {
         parse_hash_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.MemOperate.RedisOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.MemOperate.RedisOperate)
  return false;
#undef DO_
}

void MemOperate_RedisOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.MemOperate.RedisOperate)
  // required bytes key_name = 1;
  if (has_key_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key_name(), output);
  }

  // required string redis_cmd_read = 2;
  if (has_redis_cmd_read()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redis_cmd_read().data(), this->redis_cmd_read().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redis_cmd_read");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redis_cmd_read(), output);
  }

  // required string redis_cmd_write = 3;
  if (has_redis_cmd_write()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redis_cmd_write().data(), this->redis_cmd_write().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redis_cmd_write");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->redis_cmd_write(), output);
  }

  // required .DataMem.MemOperate.RedisOperate.OPERATE_TYPE op_type = 4;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->op_type(), output);
  }

  // repeated .DataMem.Field fields = 5;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fields(i), output);
  }

  // optional int32 key_ttl = 6;
  if (has_key_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->key_ttl(), output);
  }

  // optional int32 redis_structure = 7;
  if (has_redis_structure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->redis_structure(), output);
  }

  // optional int32 data_purpose = 8;
  if (has_data_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->data_purpose(), output);
  }

  // optional bytes hash_key = 9;
  if (has_hash_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->hash_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.MemOperate.RedisOperate)
}

::google::protobuf::uint8* MemOperate_RedisOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.MemOperate.RedisOperate)
  // required bytes key_name = 1;
  if (has_key_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key_name(), target);
  }

  // required string redis_cmd_read = 2;
  if (has_redis_cmd_read()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redis_cmd_read().data(), this->redis_cmd_read().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redis_cmd_read");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redis_cmd_read(), target);
  }

  // required string redis_cmd_write = 3;
  if (has_redis_cmd_write()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redis_cmd_write().data(), this->redis_cmd_write().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redis_cmd_write");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->redis_cmd_write(), target);
  }

  // required .DataMem.MemOperate.RedisOperate.OPERATE_TYPE op_type = 4;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->op_type(), target);
  }

  // repeated .DataMem.Field fields = 5;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fields(i), target);
  }

  // optional int32 key_ttl = 6;
  if (has_key_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->key_ttl(), target);
  }

  // optional int32 redis_structure = 7;
  if (has_redis_structure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->redis_structure(), target);
  }

  // optional int32 data_purpose = 8;
  if (has_data_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->data_purpose(), target);
  }

  // optional bytes hash_key = 9;
  if (has_hash_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->hash_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.MemOperate.RedisOperate)
  return target;
}

int MemOperate_RedisOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key_name = 1;
    if (has_key_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_name());
    }

    // required string redis_cmd_read = 2;
    if (has_redis_cmd_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redis_cmd_read());
    }

    // required string redis_cmd_write = 3;
    if (has_redis_cmd_write()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redis_cmd_write());
    }

    // required .DataMem.MemOperate.RedisOperate.OPERATE_TYPE op_type = 4;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional int32 key_ttl = 6;
    if (has_key_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_ttl());
    }

    // optional int32 redis_structure = 7;
    if (has_redis_structure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redis_structure());
    }

    // optional int32 data_purpose = 8;
    if (has_data_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_purpose());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes hash_key = 9;
    if (has_hash_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash_key());
    }

  }
  // repeated .DataMem.Field fields = 5;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemOperate_RedisOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemOperate_RedisOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemOperate_RedisOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemOperate_RedisOperate::MergeFrom(const MemOperate_RedisOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_name()) {
      set_key_name(from.key_name());
    }
    if (from.has_redis_cmd_read()) {
      set_redis_cmd_read(from.redis_cmd_read());
    }
    if (from.has_redis_cmd_write()) {
      set_redis_cmd_write(from.redis_cmd_write());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_key_ttl()) {
      set_key_ttl(from.key_ttl());
    }
    if (from.has_redis_structure()) {
      set_redis_structure(from.redis_structure());
    }
    if (from.has_data_purpose()) {
      set_data_purpose(from.data_purpose());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hash_key()) {
      set_hash_key(from.hash_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemOperate_RedisOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemOperate_RedisOperate::CopyFrom(const MemOperate_RedisOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemOperate_RedisOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MemOperate_RedisOperate::Swap(MemOperate_RedisOperate* other) {
  if (other != this) {
    std::swap(key_name_, other->key_name_);
    std::swap(redis_cmd_read_, other->redis_cmd_read_);
    std::swap(redis_cmd_write_, other->redis_cmd_write_);
    std::swap(op_type_, other->op_type_);
    fields_.Swap(&other->fields_);
    std::swap(key_ttl_, other->key_ttl_);
    std::swap(redis_structure_, other->redis_structure_);
    std::swap(data_purpose_, other->data_purpose_);
    std::swap(hash_key_, other->hash_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemOperate_RedisOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemOperate_RedisOperate_descriptor_;
  metadata.reflection = MemOperate_RedisOperate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* MemOperate_DbOperate_E_QUERY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_DbOperate_E_QUERY_TYPE_descriptor_;
}
bool MemOperate_DbOperate_E_QUERY_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MemOperate_DbOperate_E_QUERY_TYPE MemOperate_DbOperate::SELECT;
const MemOperate_DbOperate_E_QUERY_TYPE MemOperate_DbOperate::INSERT;
const MemOperate_DbOperate_E_QUERY_TYPE MemOperate_DbOperate::INSERT_IGNORE;
const MemOperate_DbOperate_E_QUERY_TYPE MemOperate_DbOperate::UPDATE;
const MemOperate_DbOperate_E_QUERY_TYPE MemOperate_DbOperate::REPLACE;
const MemOperate_DbOperate_E_QUERY_TYPE MemOperate_DbOperate::DELETE;
const MemOperate_DbOperate_E_QUERY_TYPE MemOperate_DbOperate::E_QUERY_TYPE_MIN;
const MemOperate_DbOperate_E_QUERY_TYPE MemOperate_DbOperate::E_QUERY_TYPE_MAX;
const int MemOperate_DbOperate::E_QUERY_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MemOperate_DbOperate_Condition_E_RELATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_DbOperate_Condition_E_RELATION_descriptor_;
}
bool MemOperate_DbOperate_Condition_E_RELATION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::EQ;
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::NE;
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::GT;
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::LT;
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::GE;
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::LE;
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::LIKE;
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::IN;
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::E_RELATION_MIN;
const MemOperate_DbOperate_Condition_E_RELATION MemOperate_DbOperate_Condition::E_RELATION_MAX;
const int MemOperate_DbOperate_Condition::E_RELATION_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MemOperate_DbOperate_Condition::kRelationFieldNumber;
const int MemOperate_DbOperate_Condition::kColTypeFieldNumber;
const int MemOperate_DbOperate_Condition::kColNameFieldNumber;
const int MemOperate_DbOperate_Condition::kColValuesFieldNumber;
const int MemOperate_DbOperate_Condition::kColNameRightFieldNumber;
#endif  // !_MSC_VER

MemOperate_DbOperate_Condition::MemOperate_DbOperate_Condition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.MemOperate.DbOperate.Condition)
}

void MemOperate_DbOperate_Condition::InitAsDefaultInstance() {
}

MemOperate_DbOperate_Condition::MemOperate_DbOperate_Condition(const MemOperate_DbOperate_Condition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.MemOperate.DbOperate.Condition)
}

void MemOperate_DbOperate_Condition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  relation_ = 0;
  col_type_ = 0;
  col_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_name_right_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemOperate_DbOperate_Condition::~MemOperate_DbOperate_Condition() {
  // @@protoc_insertion_point(destructor:DataMem.MemOperate.DbOperate.Condition)
  SharedDtor();
}

void MemOperate_DbOperate_Condition::SharedDtor() {
  if (col_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col_name_;
  }
  if (col_name_right_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col_name_right_;
  }
  if (this != default_instance_) {
  }
}

void MemOperate_DbOperate_Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemOperate_DbOperate_Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_DbOperate_Condition_descriptor_;
}

const MemOperate_DbOperate_Condition& MemOperate_DbOperate_Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

MemOperate_DbOperate_Condition* MemOperate_DbOperate_Condition::default_instance_ = NULL;

MemOperate_DbOperate_Condition* MemOperate_DbOperate_Condition::New() const {
  return new MemOperate_DbOperate_Condition;
}

void MemOperate_DbOperate_Condition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemOperate_DbOperate_Condition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(relation_, col_type_);
    if (has_col_name()) {
      if (col_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        col_name_->clear();
      }
    }
    if (has_col_name_right()) {
      if (col_name_right_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        col_name_right_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  col_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemOperate_DbOperate_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.MemOperate.DbOperate.Condition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataMem.MemOperate.DbOperate.Condition.E_RELATION relation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataMem::MemOperate_DbOperate_Condition_E_RELATION_IsValid(value)) {
            set_relation(static_cast< ::DataMem::MemOperate_DbOperate_Condition_E_RELATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_col_type;
        break;
      }

      // required .DataMem.E_COL_TYPE col_type = 2;
      case 2: {
        if (tag == 16) {
         parse_col_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataMem::E_COL_TYPE_IsValid(value)) {
            set_col_type(static_cast< ::DataMem::E_COL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_col_name;
        break;
      }

      // required string col_name = 3;
      case 3: {
        if (tag == 26) {
         parse_col_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->col_name().data(), this->col_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "col_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_col_values;
        break;
      }

      // repeated bytes col_values = 4;
      case 4: {
        if (tag == 34) {
         parse_col_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_col_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_col_values;
        if (input->ExpectTag(42)) goto parse_col_name_right;
        break;
      }

      // optional string col_name_right = 5;
      case 5: {
        if (tag == 42) {
         parse_col_name_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name_right()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->col_name_right().data(), this->col_name_right().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "col_name_right");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.MemOperate.DbOperate.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.MemOperate.DbOperate.Condition)
  return false;
#undef DO_
}

void MemOperate_DbOperate_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.MemOperate.DbOperate.Condition)
  // required .DataMem.MemOperate.DbOperate.Condition.E_RELATION relation = 1;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->relation(), output);
  }

  // required .DataMem.E_COL_TYPE col_type = 2;
  if (has_col_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->col_type(), output);
  }

  // required string col_name = 3;
  if (has_col_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->col_name(), output);
  }

  // repeated bytes col_values = 4;
  for (int i = 0; i < this->col_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->col_values(i), output);
  }

  // optional string col_name_right = 5;
  if (has_col_name_right()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name_right().data(), this->col_name_right().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_name_right");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->col_name_right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.MemOperate.DbOperate.Condition)
}

::google::protobuf::uint8* MemOperate_DbOperate_Condition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.MemOperate.DbOperate.Condition)
  // required .DataMem.MemOperate.DbOperate.Condition.E_RELATION relation = 1;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->relation(), target);
  }

  // required .DataMem.E_COL_TYPE col_type = 2;
  if (has_col_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->col_type(), target);
  }

  // required string col_name = 3;
  if (has_col_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->col_name(), target);
  }

  // repeated bytes col_values = 4;
  for (int i = 0; i < this->col_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->col_values(i), target);
  }

  // optional string col_name_right = 5;
  if (has_col_name_right()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name_right().data(), this->col_name_right().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_name_right");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->col_name_right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.MemOperate.DbOperate.Condition)
  return target;
}

int MemOperate_DbOperate_Condition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataMem.MemOperate.DbOperate.Condition.E_RELATION relation = 1;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

    // required .DataMem.E_COL_TYPE col_type = 2;
    if (has_col_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->col_type());
    }

    // required string col_name = 3;
    if (has_col_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->col_name());
    }

    // optional string col_name_right = 5;
    if (has_col_name_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->col_name_right());
    }

  }
  // repeated bytes col_values = 4;
  total_size += 1 * this->col_values_size();
  for (int i = 0; i < this->col_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->col_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemOperate_DbOperate_Condition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemOperate_DbOperate_Condition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemOperate_DbOperate_Condition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemOperate_DbOperate_Condition::MergeFrom(const MemOperate_DbOperate_Condition& from) {
  GOOGLE_CHECK_NE(&from, this);
  col_values_.MergeFrom(from.col_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_col_type()) {
      set_col_type(from.col_type());
    }
    if (from.has_col_name()) {
      set_col_name(from.col_name());
    }
    if (from.has_col_name_right()) {
      set_col_name_right(from.col_name_right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemOperate_DbOperate_Condition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemOperate_DbOperate_Condition::CopyFrom(const MemOperate_DbOperate_Condition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemOperate_DbOperate_Condition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MemOperate_DbOperate_Condition::Swap(MemOperate_DbOperate_Condition* other) {
  if (other != this) {
    std::swap(relation_, other->relation_);
    std::swap(col_type_, other->col_type_);
    std::swap(col_name_, other->col_name_);
    col_values_.Swap(&other->col_values_);
    std::swap(col_name_right_, other->col_name_right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemOperate_DbOperate_Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemOperate_DbOperate_Condition_descriptor_;
  metadata.reflection = MemOperate_DbOperate_Condition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* MemOperate_DbOperate_ConditionGroup_E_RELATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_DbOperate_ConditionGroup_E_RELATION_descriptor_;
}
bool MemOperate_DbOperate_ConditionGroup_E_RELATION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MemOperate_DbOperate_ConditionGroup_E_RELATION MemOperate_DbOperate_ConditionGroup::AND;
const MemOperate_DbOperate_ConditionGroup_E_RELATION MemOperate_DbOperate_ConditionGroup::OR;
const MemOperate_DbOperate_ConditionGroup_E_RELATION MemOperate_DbOperate_ConditionGroup::E_RELATION_MIN;
const MemOperate_DbOperate_ConditionGroup_E_RELATION MemOperate_DbOperate_ConditionGroup::E_RELATION_MAX;
const int MemOperate_DbOperate_ConditionGroup::E_RELATION_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MemOperate_DbOperate_ConditionGroup::kRelationFieldNumber;
const int MemOperate_DbOperate_ConditionGroup::kConditionFieldNumber;
#endif  // !_MSC_VER

MemOperate_DbOperate_ConditionGroup::MemOperate_DbOperate_ConditionGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.MemOperate.DbOperate.ConditionGroup)
}

void MemOperate_DbOperate_ConditionGroup::InitAsDefaultInstance() {
}

MemOperate_DbOperate_ConditionGroup::MemOperate_DbOperate_ConditionGroup(const MemOperate_DbOperate_ConditionGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.MemOperate.DbOperate.ConditionGroup)
}

void MemOperate_DbOperate_ConditionGroup::SharedCtor() {
  _cached_size_ = 0;
  relation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemOperate_DbOperate_ConditionGroup::~MemOperate_DbOperate_ConditionGroup() {
  // @@protoc_insertion_point(destructor:DataMem.MemOperate.DbOperate.ConditionGroup)
  SharedDtor();
}

void MemOperate_DbOperate_ConditionGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemOperate_DbOperate_ConditionGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemOperate_DbOperate_ConditionGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_DbOperate_ConditionGroup_descriptor_;
}

const MemOperate_DbOperate_ConditionGroup& MemOperate_DbOperate_ConditionGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

MemOperate_DbOperate_ConditionGroup* MemOperate_DbOperate_ConditionGroup::default_instance_ = NULL;

MemOperate_DbOperate_ConditionGroup* MemOperate_DbOperate_ConditionGroup::New() const {
  return new MemOperate_DbOperate_ConditionGroup;
}

void MemOperate_DbOperate_ConditionGroup::Clear() {
  relation_ = 0;
  condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemOperate_DbOperate_ConditionGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.MemOperate.DbOperate.ConditionGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataMem.MemOperate.DbOperate.ConditionGroup.E_RELATION relation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataMem::MemOperate_DbOperate_ConditionGroup_E_RELATION_IsValid(value)) {
            set_relation(static_cast< ::DataMem::MemOperate_DbOperate_ConditionGroup_E_RELATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_condition;
        break;
      }

      // repeated .DataMem.MemOperate.DbOperate.Condition condition = 2;
      case 2: {
        if (tag == 18) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_condition;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.MemOperate.DbOperate.ConditionGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.MemOperate.DbOperate.ConditionGroup)
  return false;
#undef DO_
}

void MemOperate_DbOperate_ConditionGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.MemOperate.DbOperate.ConditionGroup)
  // required .DataMem.MemOperate.DbOperate.ConditionGroup.E_RELATION relation = 1;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->relation(), output);
  }

  // repeated .DataMem.MemOperate.DbOperate.Condition condition = 2;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->condition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.MemOperate.DbOperate.ConditionGroup)
}

::google::protobuf::uint8* MemOperate_DbOperate_ConditionGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.MemOperate.DbOperate.ConditionGroup)
  // required .DataMem.MemOperate.DbOperate.ConditionGroup.E_RELATION relation = 1;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->relation(), target);
  }

  // repeated .DataMem.MemOperate.DbOperate.Condition condition = 2;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->condition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.MemOperate.DbOperate.ConditionGroup)
  return target;
}

int MemOperate_DbOperate_ConditionGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataMem.MemOperate.DbOperate.ConditionGroup.E_RELATION relation = 1;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

  }
  // repeated .DataMem.MemOperate.DbOperate.Condition condition = 2;
  total_size += 1 * this->condition_size();
  for (int i = 0; i < this->condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->condition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemOperate_DbOperate_ConditionGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemOperate_DbOperate_ConditionGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemOperate_DbOperate_ConditionGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemOperate_DbOperate_ConditionGroup::MergeFrom(const MemOperate_DbOperate_ConditionGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  condition_.MergeFrom(from.condition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemOperate_DbOperate_ConditionGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemOperate_DbOperate_ConditionGroup::CopyFrom(const MemOperate_DbOperate_ConditionGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemOperate_DbOperate_ConditionGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->condition())) return false;
  return true;
}

void MemOperate_DbOperate_ConditionGroup::Swap(MemOperate_DbOperate_ConditionGroup* other) {
  if (other != this) {
    std::swap(relation_, other->relation_);
    condition_.Swap(&other->condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemOperate_DbOperate_ConditionGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemOperate_DbOperate_ConditionGroup_descriptor_;
  metadata.reflection = MemOperate_DbOperate_ConditionGroup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* MemOperate_DbOperate_OrderBy_E_RELATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_DbOperate_OrderBy_E_RELATION_descriptor_;
}
bool MemOperate_DbOperate_OrderBy_E_RELATION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MemOperate_DbOperate_OrderBy_E_RELATION MemOperate_DbOperate_OrderBy::ASC;
const MemOperate_DbOperate_OrderBy_E_RELATION MemOperate_DbOperate_OrderBy::DESC;
const MemOperate_DbOperate_OrderBy_E_RELATION MemOperate_DbOperate_OrderBy::E_RELATION_MIN;
const MemOperate_DbOperate_OrderBy_E_RELATION MemOperate_DbOperate_OrderBy::E_RELATION_MAX;
const int MemOperate_DbOperate_OrderBy::E_RELATION_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MemOperate_DbOperate_OrderBy::kRelationFieldNumber;
const int MemOperate_DbOperate_OrderBy::kColNameFieldNumber;
#endif  // !_MSC_VER

MemOperate_DbOperate_OrderBy::MemOperate_DbOperate_OrderBy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.MemOperate.DbOperate.OrderBy)
}

void MemOperate_DbOperate_OrderBy::InitAsDefaultInstance() {
}

MemOperate_DbOperate_OrderBy::MemOperate_DbOperate_OrderBy(const MemOperate_DbOperate_OrderBy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.MemOperate.DbOperate.OrderBy)
}

void MemOperate_DbOperate_OrderBy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  relation_ = 0;
  col_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemOperate_DbOperate_OrderBy::~MemOperate_DbOperate_OrderBy() {
  // @@protoc_insertion_point(destructor:DataMem.MemOperate.DbOperate.OrderBy)
  SharedDtor();
}

void MemOperate_DbOperate_OrderBy::SharedDtor() {
  if (col_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col_name_;
  }
  if (this != default_instance_) {
  }
}

void MemOperate_DbOperate_OrderBy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemOperate_DbOperate_OrderBy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_DbOperate_OrderBy_descriptor_;
}

const MemOperate_DbOperate_OrderBy& MemOperate_DbOperate_OrderBy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

MemOperate_DbOperate_OrderBy* MemOperate_DbOperate_OrderBy::default_instance_ = NULL;

MemOperate_DbOperate_OrderBy* MemOperate_DbOperate_OrderBy::New() const {
  return new MemOperate_DbOperate_OrderBy;
}

void MemOperate_DbOperate_OrderBy::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    relation_ = 0;
    if (has_col_name()) {
      if (col_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        col_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemOperate_DbOperate_OrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.MemOperate.DbOperate.OrderBy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataMem.MemOperate.DbOperate.OrderBy.E_RELATION relation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataMem::MemOperate_DbOperate_OrderBy_E_RELATION_IsValid(value)) {
            set_relation(static_cast< ::DataMem::MemOperate_DbOperate_OrderBy_E_RELATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_col_name;
        break;
      }

      // required string col_name = 2;
      case 2: {
        if (tag == 18) {
         parse_col_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->col_name().data(), this->col_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "col_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.MemOperate.DbOperate.OrderBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.MemOperate.DbOperate.OrderBy)
  return false;
#undef DO_
}

void MemOperate_DbOperate_OrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.MemOperate.DbOperate.OrderBy)
  // required .DataMem.MemOperate.DbOperate.OrderBy.E_RELATION relation = 1;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->relation(), output);
  }

  // required string col_name = 2;
  if (has_col_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->col_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.MemOperate.DbOperate.OrderBy)
}

::google::protobuf::uint8* MemOperate_DbOperate_OrderBy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.MemOperate.DbOperate.OrderBy)
  // required .DataMem.MemOperate.DbOperate.OrderBy.E_RELATION relation = 1;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->relation(), target);
  }

  // required string col_name = 2;
  if (has_col_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->col_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.MemOperate.DbOperate.OrderBy)
  return target;
}

int MemOperate_DbOperate_OrderBy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataMem.MemOperate.DbOperate.OrderBy.E_RELATION relation = 1;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

    // required string col_name = 2;
    if (has_col_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->col_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemOperate_DbOperate_OrderBy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemOperate_DbOperate_OrderBy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemOperate_DbOperate_OrderBy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemOperate_DbOperate_OrderBy::MergeFrom(const MemOperate_DbOperate_OrderBy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_col_name()) {
      set_col_name(from.col_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemOperate_DbOperate_OrderBy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemOperate_DbOperate_OrderBy::CopyFrom(const MemOperate_DbOperate_OrderBy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemOperate_DbOperate_OrderBy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MemOperate_DbOperate_OrderBy::Swap(MemOperate_DbOperate_OrderBy* other) {
  if (other != this) {
    std::swap(relation_, other->relation_);
    std::swap(col_name_, other->col_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemOperate_DbOperate_OrderBy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemOperate_DbOperate_OrderBy_descriptor_;
  metadata.reflection = MemOperate_DbOperate_OrderBy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MemOperate_DbOperate::kQueryTypeFieldNumber;
const int MemOperate_DbOperate::kTableNameFieldNumber;
const int MemOperate_DbOperate::kFieldsFieldNumber;
const int MemOperate_DbOperate::kConditionsFieldNumber;
const int MemOperate_DbOperate::kGroupbyColFieldNumber;
const int MemOperate_DbOperate::kOrderbyColFieldNumber;
const int MemOperate_DbOperate::kGroupRelationFieldNumber;
const int MemOperate_DbOperate::kLimitFieldNumber;
const int MemOperate_DbOperate::kLimitFromFieldNumber;
const int MemOperate_DbOperate::kModFactorFieldNumber;
#endif  // !_MSC_VER

MemOperate_DbOperate::MemOperate_DbOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.MemOperate.DbOperate)
}

void MemOperate_DbOperate::InitAsDefaultInstance() {
}

MemOperate_DbOperate::MemOperate_DbOperate(const MemOperate_DbOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.MemOperate.DbOperate)
}

void MemOperate_DbOperate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_type_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_relation_ = 0;
  limit_ = 0u;
  limit_from_ = 0u;
  mod_factor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemOperate_DbOperate::~MemOperate_DbOperate() {
  // @@protoc_insertion_point(destructor:DataMem.MemOperate.DbOperate)
  SharedDtor();
}

void MemOperate_DbOperate::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void MemOperate_DbOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemOperate_DbOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_DbOperate_descriptor_;
}

const MemOperate_DbOperate& MemOperate_DbOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

MemOperate_DbOperate* MemOperate_DbOperate::default_instance_ = NULL;

MemOperate_DbOperate* MemOperate_DbOperate::New() const {
  return new MemOperate_DbOperate;
}

void MemOperate_DbOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemOperate_DbOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 195) {
    ZR_(query_type_, group_relation_);
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_name_->clear();
      }
    }
    limit_ = 0u;
  }
  ZR_(limit_from_, mod_factor_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  fields_.Clear();
  conditions_.Clear();
  groupby_col_.Clear();
  orderby_col_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemOperate_DbOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.MemOperate.DbOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataMem.MemOperate.DbOperate.E_QUERY_TYPE query_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataMem::MemOperate_DbOperate_E_QUERY_TYPE_IsValid(value)) {
            set_query_type(static_cast< ::DataMem::MemOperate_DbOperate_E_QUERY_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required string table_name = 2;
      case 2: {
        if (tag == 18) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        break;
      }

      // repeated .DataMem.Field fields = 3;
      case 3: {
        if (tag == 26) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        if (input->ExpectTag(34)) goto parse_conditions;
        break;
      }

      // repeated .DataMem.MemOperate.DbOperate.ConditionGroup conditions = 4;
      case 4: {
        if (tag == 34) {
         parse_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conditions;
        if (input->ExpectTag(42)) goto parse_groupby_col;
        break;
      }

      // repeated string groupby_col = 5;
      case 5: {
        if (tag == 42) {
         parse_groupby_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_groupby_col()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupby_col(this->groupby_col_size() - 1).data(),
            this->groupby_col(this->groupby_col_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupby_col");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_groupby_col;
        if (input->ExpectTag(50)) goto parse_orderby_col;
        break;
      }

      // repeated .DataMem.MemOperate.DbOperate.OrderBy orderby_col = 6;
      case 6: {
        if (tag == 50) {
         parse_orderby_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orderby_col()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_orderby_col;
        if (input->ExpectTag(56)) goto parse_group_relation;
        break;
      }

      // optional .DataMem.MemOperate.DbOperate.ConditionGroup.E_RELATION group_relation = 7;
      case 7: {
        if (tag == 56) {
         parse_group_relation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataMem::MemOperate_DbOperate_ConditionGroup_E_RELATION_IsValid(value)) {
            set_group_relation(static_cast< ::DataMem::MemOperate_DbOperate_ConditionGroup_E_RELATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 8;
      case 8: {
        if (tag == 64) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_limit_from;
        break;
      }

      // optional uint32 limit_from = 9;
      case 9: {
        if (tag == 72) {
         parse_limit_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_from_)));
          set_has_limit_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mod_factor;
        break;
      }

      // optional uint32 mod_factor = 10;
      case 10: {
        if (tag == 80) {
         parse_mod_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mod_factor_)));
          set_has_mod_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.MemOperate.DbOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.MemOperate.DbOperate)
  return false;
#undef DO_
}

void MemOperate_DbOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.MemOperate.DbOperate)
  // required .DataMem.MemOperate.DbOperate.E_QUERY_TYPE query_type = 1;
  if (has_query_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->query_type(), output);
  }

  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  // repeated .DataMem.Field fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fields(i), output);
  }

  // repeated .DataMem.MemOperate.DbOperate.ConditionGroup conditions = 4;
  for (int i = 0; i < this->conditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->conditions(i), output);
  }

  // repeated string groupby_col = 5;
  for (int i = 0; i < this->groupby_col_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->groupby_col(i).data(), this->groupby_col(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "groupby_col");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->groupby_col(i), output);
  }

  // repeated .DataMem.MemOperate.DbOperate.OrderBy orderby_col = 6;
  for (int i = 0; i < this->orderby_col_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->orderby_col(i), output);
  }

  // optional .DataMem.MemOperate.DbOperate.ConditionGroup.E_RELATION group_relation = 7;
  if (has_group_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->group_relation(), output);
  }

  // optional uint32 limit = 8;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->limit(), output);
  }

  // optional uint32 limit_from = 9;
  if (has_limit_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->limit_from(), output);
  }

  // optional uint32 mod_factor = 10;
  if (has_mod_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mod_factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.MemOperate.DbOperate)
}

::google::protobuf::uint8* MemOperate_DbOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.MemOperate.DbOperate)
  // required .DataMem.MemOperate.DbOperate.E_QUERY_TYPE query_type = 1;
  if (has_query_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->query_type(), target);
  }

  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  // repeated .DataMem.Field fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fields(i), target);
  }

  // repeated .DataMem.MemOperate.DbOperate.ConditionGroup conditions = 4;
  for (int i = 0; i < this->conditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->conditions(i), target);
  }

  // repeated string groupby_col = 5;
  for (int i = 0; i < this->groupby_col_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupby_col(i).data(), this->groupby_col(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupby_col");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->groupby_col(i), target);
  }

  // repeated .DataMem.MemOperate.DbOperate.OrderBy orderby_col = 6;
  for (int i = 0; i < this->orderby_col_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->orderby_col(i), target);
  }

  // optional .DataMem.MemOperate.DbOperate.ConditionGroup.E_RELATION group_relation = 7;
  if (has_group_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->group_relation(), target);
  }

  // optional uint32 limit = 8;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->limit(), target);
  }

  // optional uint32 limit_from = 9;
  if (has_limit_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->limit_from(), target);
  }

  // optional uint32 mod_factor = 10;
  if (has_mod_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mod_factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.MemOperate.DbOperate)
  return target;
}

int MemOperate_DbOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataMem.MemOperate.DbOperate.E_QUERY_TYPE query_type = 1;
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
    }

    // required string table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional .DataMem.MemOperate.DbOperate.ConditionGroup.E_RELATION group_relation = 7;
    if (has_group_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_relation());
    }

    // optional uint32 limit = 8;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 limit_from = 9;
    if (has_limit_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_from());
    }

    // optional uint32 mod_factor = 10;
    if (has_mod_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mod_factor());
    }

  }
  // repeated .DataMem.Field fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  // repeated .DataMem.MemOperate.DbOperate.ConditionGroup conditions = 4;
  total_size += 1 * this->conditions_size();
  for (int i = 0; i < this->conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conditions(i));
  }

  // repeated string groupby_col = 5;
  total_size += 1 * this->groupby_col_size();
  for (int i = 0; i < this->groupby_col_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->groupby_col(i));
  }

  // repeated .DataMem.MemOperate.DbOperate.OrderBy orderby_col = 6;
  total_size += 1 * this->orderby_col_size();
  for (int i = 0; i < this->orderby_col_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderby_col(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemOperate_DbOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemOperate_DbOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemOperate_DbOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemOperate_DbOperate::MergeFrom(const MemOperate_DbOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  conditions_.MergeFrom(from.conditions_);
  groupby_col_.MergeFrom(from.groupby_col_);
  orderby_col_.MergeFrom(from.orderby_col_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query_type()) {
      set_query_type(from.query_type());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_group_relation()) {
      set_group_relation(from.group_relation());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_limit_from()) {
      set_limit_from(from.limit_from());
    }
    if (from.has_mod_factor()) {
      set_mod_factor(from.mod_factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemOperate_DbOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemOperate_DbOperate::CopyFrom(const MemOperate_DbOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemOperate_DbOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->conditions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->orderby_col())) return false;
  return true;
}

void MemOperate_DbOperate::Swap(MemOperate_DbOperate* other) {
  if (other != this) {
    std::swap(query_type_, other->query_type_);
    std::swap(table_name_, other->table_name_);
    fields_.Swap(&other->fields_);
    conditions_.Swap(&other->conditions_);
    groupby_col_.Swap(&other->groupby_col_);
    orderby_col_.Swap(&other->orderby_col_);
    std::swap(group_relation_, other->group_relation_);
    std::swap(limit_, other->limit_);
    std::swap(limit_from_, other->limit_from_);
    std::swap(mod_factor_, other->mod_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemOperate_DbOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemOperate_DbOperate_descriptor_;
  metadata.reflection = MemOperate_DbOperate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MemOperate::kSectionFactorFieldNumber;
const int MemOperate::kRedisOperateFieldNumber;
const int MemOperate::kDbOperateFieldNumber;
#endif  // !_MSC_VER

MemOperate::MemOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.MemOperate)
}

void MemOperate::InitAsDefaultInstance() {
  redis_operate_ = const_cast< ::DataMem::MemOperate_RedisOperate*>(&::DataMem::MemOperate_RedisOperate::default_instance());
  db_operate_ = const_cast< ::DataMem::MemOperate_DbOperate*>(&::DataMem::MemOperate_DbOperate::default_instance());
}

MemOperate::MemOperate(const MemOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.MemOperate)
}

void MemOperate::SharedCtor() {
  _cached_size_ = 0;
  section_factor_ = 0u;
  redis_operate_ = NULL;
  db_operate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemOperate::~MemOperate() {
  // @@protoc_insertion_point(destructor:DataMem.MemOperate)
  SharedDtor();
}

void MemOperate::SharedDtor() {
  if (this != default_instance_) {
    delete redis_operate_;
    delete db_operate_;
  }
}

void MemOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemOperate_descriptor_;
}

const MemOperate& MemOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

MemOperate* MemOperate::default_instance_ = NULL;

MemOperate* MemOperate::New() const {
  return new MemOperate;
}

void MemOperate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    section_factor_ = 0u;
    if (has_redis_operate()) {
      if (redis_operate_ != NULL) redis_operate_->::DataMem::MemOperate_RedisOperate::Clear();
    }
    if (has_db_operate()) {
      if (db_operate_ != NULL) db_operate_->::DataMem::MemOperate_DbOperate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.MemOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 section_factor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_factor_)));
          set_has_section_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_redis_operate;
        break;
      }

      // optional .DataMem.MemOperate.RedisOperate redis_operate = 2;
      case 2: {
        if (tag == 18) {
         parse_redis_operate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redis_operate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_db_operate;
        break;
      }

      // optional .DataMem.MemOperate.DbOperate db_operate = 3;
      case 3: {
        if (tag == 26) {
         parse_db_operate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_operate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.MemOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.MemOperate)
  return false;
#undef DO_
}

void MemOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.MemOperate)
  // required uint32 section_factor = 1;
  if (has_section_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->section_factor(), output);
  }

  // optional .DataMem.MemOperate.RedisOperate redis_operate = 2;
  if (has_redis_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->redis_operate(), output);
  }

  // optional .DataMem.MemOperate.DbOperate db_operate = 3;
  if (has_db_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->db_operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.MemOperate)
}

::google::protobuf::uint8* MemOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.MemOperate)
  // required uint32 section_factor = 1;
  if (has_section_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->section_factor(), target);
  }

  // optional .DataMem.MemOperate.RedisOperate redis_operate = 2;
  if (has_redis_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->redis_operate(), target);
  }

  // optional .DataMem.MemOperate.DbOperate db_operate = 3;
  if (has_db_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->db_operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.MemOperate)
  return target;
}

int MemOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 section_factor = 1;
    if (has_section_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_factor());
    }

    // optional .DataMem.MemOperate.RedisOperate redis_operate = 2;
    if (has_redis_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redis_operate());
    }

    // optional .DataMem.MemOperate.DbOperate db_operate = 3;
    if (has_db_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemOperate::MergeFrom(const MemOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_section_factor()) {
      set_section_factor(from.section_factor());
    }
    if (from.has_redis_operate()) {
      mutable_redis_operate()->::DataMem::MemOperate_RedisOperate::MergeFrom(from.redis_operate());
    }
    if (from.has_db_operate()) {
      mutable_db_operate()->::DataMem::MemOperate_DbOperate::MergeFrom(from.db_operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemOperate::CopyFrom(const MemOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_redis_operate()) {
    if (!this->redis_operate().IsInitialized()) return false;
  }
  if (has_db_operate()) {
    if (!this->db_operate().IsInitialized()) return false;
  }
  return true;
}

void MemOperate::Swap(MemOperate* other) {
  if (other != this) {
    std::swap(section_factor_, other->section_factor_);
    std::swap(redis_operate_, other->redis_operate_);
    std::swap(db_operate_, other->db_operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemOperate_descriptor_;
  metadata.reflection = MemOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Record::kFieldInfoFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.Record)
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.Record)
}

void Record::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:DataMem.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
  field_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataMem.Field field_info = 1;
      case 1: {
        if (tag == 10) {
         parse_field_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_field_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.Record)
  // repeated .DataMem.Field field_info = 1;
  for (int i = 0; i < this->field_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.Record)
}

::google::protobuf::uint8* Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.Record)
  // repeated .DataMem.Field field_info = 1;
  for (int i = 0; i < this->field_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.Record)
  return target;
}

int Record::ByteSize() const {
  int total_size = 0;

  // repeated .DataMem.Field field_info = 1;
  total_size += 1 * this->field_info_size();
  for (int i = 0; i < this->field_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_info_.MergeFrom(from.field_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {

  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    field_info_.Swap(&other->field_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Field::kColNameFieldNumber;
const int Field::kColTypeFieldNumber;
const int Field::kColValueFieldNumber;
const int Field::kColAsFieldNumber;
#endif  // !_MSC_VER

Field::Field()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.Field)
}

void Field::InitAsDefaultInstance() {
}

Field::Field(const Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.Field)
}

void Field::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  col_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_type_ = 0;
  col_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_as_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:DataMem.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  if (col_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col_name_;
  }
  if (col_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col_value_;
  }
  if (col_as_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col_as_;
  }
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New() const {
  return new Field;
}

void Field::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_col_name()) {
      if (col_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        col_name_->clear();
      }
    }
    col_type_ = 0;
    if (has_col_value()) {
      if (col_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        col_value_->clear();
      }
    }
    if (has_col_as()) {
      if (col_as_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        col_as_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string col_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->col_name().data(), this->col_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "col_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_col_type;
        break;
      }

      // optional .DataMem.E_COL_TYPE col_type = 2;
      case 2: {
        if (tag == 16) {
         parse_col_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataMem::E_COL_TYPE_IsValid(value)) {
            set_col_type(static_cast< ::DataMem::E_COL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_col_value;
        break;
      }

      // optional bytes col_value = 3;
      case 3: {
        if (tag == 26) {
         parse_col_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_col_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_col_as;
        break;
      }

      // optional string col_as = 4;
      case 4: {
        if (tag == 34) {
         parse_col_as:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_as()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->col_as().data(), this->col_as().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "col_as");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.Field)
  // optional string col_name = 1;
  if (has_col_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->col_name(), output);
  }

  // optional .DataMem.E_COL_TYPE col_type = 2;
  if (has_col_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->col_type(), output);
  }

  // optional bytes col_value = 3;
  if (has_col_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->col_value(), output);
  }

  // optional string col_as = 4;
  if (has_col_as()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_as().data(), this->col_as().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_as");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->col_as(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.Field)
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.Field)
  // optional string col_name = 1;
  if (has_col_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->col_name(), target);
  }

  // optional .DataMem.E_COL_TYPE col_type = 2;
  if (has_col_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->col_type(), target);
  }

  // optional bytes col_value = 3;
  if (has_col_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->col_value(), target);
  }

  // optional string col_as = 4;
  if (has_col_as()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_as().data(), this->col_as().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col_as");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->col_as(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.Field)
  return target;
}

int Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string col_name = 1;
    if (has_col_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->col_name());
    }

    // optional .DataMem.E_COL_TYPE col_type = 2;
    if (has_col_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->col_type());
    }

    // optional bytes col_value = 3;
    if (has_col_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->col_value());
    }

    // optional string col_as = 4;
    if (has_col_as()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->col_as());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_col_name()) {
      set_col_name(from.col_name());
    }
    if (from.has_col_type()) {
      set_col_type(from.col_type());
    }
    if (from.has_col_value()) {
      set_col_value(from.col_value());
    }
    if (from.has_col_as()) {
      set_col_as(from.col_as());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  return true;
}

void Field::Swap(Field* other) {
  if (other != this) {
    std::swap(col_name_, other->col_name_);
    std::swap(col_type_, other->col_type_);
    std::swap(col_value_, other->col_value_);
    std::swap(col_as_, other->col_as_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MemRsp_E_RESULT_FROM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemRsp_E_RESULT_FROM_descriptor_;
}
bool MemRsp_E_RESULT_FROM_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MemRsp_E_RESULT_FROM MemRsp::FROM_REDIS;
const MemRsp_E_RESULT_FROM MemRsp::FROM_DB;
const MemRsp_E_RESULT_FROM MemRsp::E_RESULT_FROM_MIN;
const MemRsp_E_RESULT_FROM MemRsp::E_RESULT_FROM_MAX;
const int MemRsp::E_RESULT_FROM_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MemRsp_DataLocate::kSectionFromFieldNumber;
const int MemRsp_DataLocate::kSectionToFieldNumber;
const int MemRsp_DataLocate::kHashFieldNumber;
const int MemRsp_DataLocate::kDivisorFieldNumber;
#endif  // !_MSC_VER

MemRsp_DataLocate::MemRsp_DataLocate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.MemRsp.DataLocate)
}

void MemRsp_DataLocate::InitAsDefaultInstance() {
}

MemRsp_DataLocate::MemRsp_DataLocate(const MemRsp_DataLocate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.MemRsp.DataLocate)
}

void MemRsp_DataLocate::SharedCtor() {
  _cached_size_ = 0;
  section_from_ = 0u;
  section_to_ = 0u;
  hash_ = 0u;
  divisor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemRsp_DataLocate::~MemRsp_DataLocate() {
  // @@protoc_insertion_point(destructor:DataMem.MemRsp.DataLocate)
  SharedDtor();
}

void MemRsp_DataLocate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemRsp_DataLocate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemRsp_DataLocate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemRsp_DataLocate_descriptor_;
}

const MemRsp_DataLocate& MemRsp_DataLocate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

MemRsp_DataLocate* MemRsp_DataLocate::default_instance_ = NULL;

MemRsp_DataLocate* MemRsp_DataLocate::New() const {
  return new MemRsp_DataLocate;
}

void MemRsp_DataLocate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemRsp_DataLocate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(section_from_, divisor_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemRsp_DataLocate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.MemRsp.DataLocate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 section_from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_from_)));
          set_has_section_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_section_to;
        break;
      }

      // required uint32 section_to = 2;
      case 2: {
        if (tag == 16) {
         parse_section_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_to_)));
          set_has_section_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hash;
        break;
      }

      // optional uint32 hash = 3;
      case 3: {
        if (tag == 24) {
         parse_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_divisor;
        break;
      }

      // optional uint32 divisor = 4;
      case 4: {
        if (tag == 32) {
         parse_divisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &divisor_)));
          set_has_divisor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.MemRsp.DataLocate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.MemRsp.DataLocate)
  return false;
#undef DO_
}

void MemRsp_DataLocate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.MemRsp.DataLocate)
  // required uint32 section_from = 1;
  if (has_section_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->section_from(), output);
  }

  // required uint32 section_to = 2;
  if (has_section_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->section_to(), output);
  }

  // optional uint32 hash = 3;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hash(), output);
  }

  // optional uint32 divisor = 4;
  if (has_divisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->divisor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.MemRsp.DataLocate)
}

::google::protobuf::uint8* MemRsp_DataLocate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.MemRsp.DataLocate)
  // required uint32 section_from = 1;
  if (has_section_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->section_from(), target);
  }

  // required uint32 section_to = 2;
  if (has_section_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->section_to(), target);
  }

  // optional uint32 hash = 3;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hash(), target);
  }

  // optional uint32 divisor = 4;
  if (has_divisor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->divisor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.MemRsp.DataLocate)
  return target;
}

int MemRsp_DataLocate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 section_from = 1;
    if (has_section_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_from());
    }

    // required uint32 section_to = 2;
    if (has_section_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_to());
    }

    // optional uint32 hash = 3;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
    }

    // optional uint32 divisor = 4;
    if (has_divisor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->divisor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemRsp_DataLocate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemRsp_DataLocate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemRsp_DataLocate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemRsp_DataLocate::MergeFrom(const MemRsp_DataLocate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_section_from()) {
      set_section_from(from.section_from());
    }
    if (from.has_section_to()) {
      set_section_to(from.section_to());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_divisor()) {
      set_divisor(from.divisor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemRsp_DataLocate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemRsp_DataLocate::CopyFrom(const MemRsp_DataLocate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemRsp_DataLocate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MemRsp_DataLocate::Swap(MemRsp_DataLocate* other) {
  if (other != this) {
    std::swap(section_from_, other->section_from_);
    std::swap(section_to_, other->section_to_);
    std::swap(hash_, other->hash_);
    std::swap(divisor_, other->divisor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemRsp_DataLocate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemRsp_DataLocate_descriptor_;
  metadata.reflection = MemRsp_DataLocate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MemRsp::kErrNoFieldNumber;
const int MemRsp::kErrMsgFieldNumber;
const int MemRsp::kTotalcountFieldNumber;
const int MemRsp::kCurcountFieldNumber;
const int MemRsp::kRecordDataFieldNumber;
const int MemRsp::kFromFieldNumber;
const int MemRsp::kLocateFieldNumber;
#endif  // !_MSC_VER

MemRsp::MemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMem.MemRsp)
}

void MemRsp::InitAsDefaultInstance() {
  locate_ = const_cast< ::DataMem::MemRsp_DataLocate*>(&::DataMem::MemRsp_DataLocate::default_instance());
}

MemRsp::MemRsp(const MemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataMem.MemRsp)
}

void MemRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  err_no_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalcount_ = 0;
  curcount_ = 0;
  from_ = 0;
  locate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemRsp::~MemRsp() {
  // @@protoc_insertion_point(destructor:DataMem.MemRsp)
  SharedDtor();
}

void MemRsp::SharedDtor() {
  if (err_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_msg_;
  }
  if (this != default_instance_) {
    delete locate_;
  }
}

void MemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemRsp_descriptor_;
}

const MemRsp& MemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataproxy_2eproto();
  return *default_instance_;
}

MemRsp* MemRsp::default_instance_ = NULL;

MemRsp* MemRsp::New() const {
  return new MemRsp;
}

void MemRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(err_no_, totalcount_);
    ZR_(curcount_, from_);
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_msg_->clear();
      }
    }
    if (has_locate()) {
      if (locate_ != NULL) locate_->::DataMem::MemRsp_DataLocate::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  record_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMem.MemRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_err_msg;
        break;
      }

      // optional bytes err_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_err_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalcount;
        break;
      }

      // optional int32 totalcount = 3;
      case 3: {
        if (tag == 24) {
         parse_totalcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curcount;
        break;
      }

      // optional int32 curcount = 4;
      case 4: {
        if (tag == 32) {
         parse_curcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcount_)));
          set_has_curcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_record_data;
        break;
      }

      // repeated .DataMem.Record record_data = 5;
      case 5: {
        if (tag == 42) {
         parse_record_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_record_data;
        if (input->ExpectTag(48)) goto parse_from;
        break;
      }

      // optional int32 from = 6;
      case 6: {
        if (tag == 48) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_locate;
        break;
      }

      // optional .DataMem.MemRsp.DataLocate locate = 7;
      case 7: {
        if (tag == 58) {
         parse_locate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMem.MemRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMem.MemRsp)
  return false;
#undef DO_
}

void MemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMem.MemRsp)
  // required int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional bytes err_msg = 2;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->err_msg(), output);
  }

  // optional int32 totalcount = 3;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalcount(), output);
  }

  // optional int32 curcount = 4;
  if (has_curcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curcount(), output);
  }

  // repeated .DataMem.Record record_data = 5;
  for (int i = 0; i < this->record_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->record_data(i), output);
  }

  // optional int32 from = 6;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->from(), output);
  }

  // optional .DataMem.MemRsp.DataLocate locate = 7;
  if (has_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->locate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataMem.MemRsp)
}

::google::protobuf::uint8* MemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMem.MemRsp)
  // required int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional bytes err_msg = 2;
  if (has_err_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->err_msg(), target);
  }

  // optional int32 totalcount = 3;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalcount(), target);
  }

  // optional int32 curcount = 4;
  if (has_curcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curcount(), target);
  }

  // repeated .DataMem.Record record_data = 5;
  for (int i = 0; i < this->record_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->record_data(i), target);
  }

  // optional int32 from = 6;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->from(), target);
  }

  // optional .DataMem.MemRsp.DataLocate locate = 7;
  if (has_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->locate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataMem.MemRsp)
  return target;
}

int MemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional bytes err_msg = 2;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->err_msg());
    }

    // optional int32 totalcount = 3;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional int32 curcount = 4;
    if (has_curcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curcount());
    }

    // optional int32 from = 6;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

    // optional .DataMem.MemRsp.DataLocate locate = 7;
    if (has_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locate());
    }

  }
  // repeated .DataMem.Record record_data = 5;
  total_size += 1 * this->record_data_size();
  for (int i = 0; i < this->record_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemRsp::MergeFrom(const MemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_data_.MergeFrom(from.record_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_curcount()) {
      set_curcount(from.curcount());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_locate()) {
      mutable_locate()->::DataMem::MemRsp_DataLocate::MergeFrom(from.locate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemRsp::CopyFrom(const MemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_locate()) {
    if (!this->locate().IsInitialized()) return false;
  }
  return true;
}

void MemRsp::Swap(MemRsp* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(totalcount_, other->totalcount_);
    std::swap(curcount_, other->curcount_);
    record_data_.Swap(&other->record_data_);
    std::swap(from_, other->from_);
    std::swap(locate_, other->locate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemRsp_descriptor_;
  metadata.reflection = MemRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataMem

// @@protoc_insertion_point(global_scope)
