// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enumeration.proto

#ifndef PROTOBUF_enumeration_2eproto__INCLUDED
#define PROTOBUF_enumeration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace enumeration {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_enumeration_2eproto();
void protobuf_AssignDesc_enumeration_2eproto();
void protobuf_ShutdownFile_enumeration_2eproto();


enum E_CLIENT_TYPE {
  TYPE_CLIENT_UNKNOWN = 0,
  TYPE_CLIENT_PC = 1,
  TYPE_CLIENT_ANDROID = 2,
  TYPE_CLIENT_IOS = 3,
  TYPE_CLIENT_IPAD = 4,
  TYPE_CLIENT_WEB = 5,
  TYPE_CLIENT_COUNT = 6
};
bool E_CLIENT_TYPE_IsValid(int value);
const E_CLIENT_TYPE E_CLIENT_TYPE_MIN = TYPE_CLIENT_UNKNOWN;
const E_CLIENT_TYPE E_CLIENT_TYPE_MAX = TYPE_CLIENT_COUNT;
const int E_CLIENT_TYPE_ARRAYSIZE = E_CLIENT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_CLIENT_TYPE_descriptor();
inline const ::std::string& E_CLIENT_TYPE_Name(E_CLIENT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_CLIENT_TYPE_descriptor(), value);
}
inline bool E_CLIENT_TYPE_Parse(
    const ::std::string& name, E_CLIENT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_CLIENT_TYPE>(
    E_CLIENT_TYPE_descriptor(), name, value);
}
enum E_ACCOUNT_LOGIN_TYPE {
  TYPE_LOGIN_BY_UNKNOWN = 0,
  TYPE_LOGIN_BY_UID = 1,
  TYPE_LOGIN_BY_PHONE = 2,
  TYPE_LOGIN_BY_EMAIL = 3,
  TYPE_LOGIN_BY_QQ = 4,
  TYPE_LOGIN_BY_COUNT = 5
};
bool E_ACCOUNT_LOGIN_TYPE_IsValid(int value);
const E_ACCOUNT_LOGIN_TYPE E_ACCOUNT_LOGIN_TYPE_MIN = TYPE_LOGIN_BY_UNKNOWN;
const E_ACCOUNT_LOGIN_TYPE E_ACCOUNT_LOGIN_TYPE_MAX = TYPE_LOGIN_BY_COUNT;
const int E_ACCOUNT_LOGIN_TYPE_ARRAYSIZE = E_ACCOUNT_LOGIN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_ACCOUNT_LOGIN_TYPE_descriptor();
inline const ::std::string& E_ACCOUNT_LOGIN_TYPE_Name(E_ACCOUNT_LOGIN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_ACCOUNT_LOGIN_TYPE_descriptor(), value);
}
inline bool E_ACCOUNT_LOGIN_TYPE_Parse(
    const ::std::string& name, E_ACCOUNT_LOGIN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_ACCOUNT_LOGIN_TYPE>(
    E_ACCOUNT_LOGIN_TYPE_descriptor(), name, value);
}
enum E_OPERATE_TYPE {
  TYPE_UNKNOWN = 0,
  TYPE_INSERT = 1,
  TYPE_DELETE = 2,
  TYPE_UPDATE = 3,
  TYPE_SELECT = 4
};
bool E_OPERATE_TYPE_IsValid(int value);
const E_OPERATE_TYPE E_OPERATE_TYPE_MIN = TYPE_UNKNOWN;
const E_OPERATE_TYPE E_OPERATE_TYPE_MAX = TYPE_SELECT;
const int E_OPERATE_TYPE_ARRAYSIZE = E_OPERATE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_OPERATE_TYPE_descriptor();
inline const ::std::string& E_OPERATE_TYPE_Name(E_OPERATE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_OPERATE_TYPE_descriptor(), value);
}
inline bool E_OPERATE_TYPE_Parse(
    const ::std::string& name, E_OPERATE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_OPERATE_TYPE>(
    E_OPERATE_TYPE_descriptor(), name, value);
}
enum E_USER_STATUS {
  STATUS_UNKNOWN_USER_STATUS = 0,
  STATUS_USER_STATUS_ON = 1,
  STATUS_USER_STATUS_OFF = 2
};
bool E_USER_STATUS_IsValid(int value);
const E_USER_STATUS E_USER_STATUS_MIN = STATUS_UNKNOWN_USER_STATUS;
const E_USER_STATUS E_USER_STATUS_MAX = STATUS_USER_STATUS_OFF;
const int E_USER_STATUS_ARRAYSIZE = E_USER_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_USER_STATUS_descriptor();
inline const ::std::string& E_USER_STATUS_Name(E_USER_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_USER_STATUS_descriptor(), value);
}
inline bool E_USER_STATUS_Parse(
    const ::std::string& name, E_USER_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_USER_STATUS>(
    E_USER_STATUS_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace enumeration

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::enumeration::E_CLIENT_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enumeration::E_CLIENT_TYPE>() {
  return ::enumeration::E_CLIENT_TYPE_descriptor();
}
template <> struct is_proto_enum< ::enumeration::E_ACCOUNT_LOGIN_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enumeration::E_ACCOUNT_LOGIN_TYPE>() {
  return ::enumeration::E_ACCOUNT_LOGIN_TYPE_descriptor();
}
template <> struct is_proto_enum< ::enumeration::E_OPERATE_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enumeration::E_OPERATE_TYPE>() {
  return ::enumeration::E_OPERATE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::enumeration::E_USER_STATUS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enumeration::E_USER_STATUS>() {
  return ::enumeration::E_USER_STATUS_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_enumeration_2eproto__INCLUDED
