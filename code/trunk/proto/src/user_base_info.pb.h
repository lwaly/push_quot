// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_base_info.proto

#ifndef PROTOBUF_user_5fbase_5finfo_2eproto__INCLUDED
#define PROTOBUF_user_5fbase_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_user_5fbase_5finfo_2eproto();
void protobuf_AssignDesc_user_5fbase_5finfo_2eproto();
void protobuf_ShutdownFile_user_5fbase_5finfo_2eproto();

class user_base_info;

enum E_PROHIBIT {
  BAN_LOGIN = 1
};
bool E_PROHIBIT_IsValid(int value);
const E_PROHIBIT E_PROHIBIT_MIN = BAN_LOGIN;
const E_PROHIBIT E_PROHIBIT_MAX = BAN_LOGIN;
const int E_PROHIBIT_ARRAYSIZE = E_PROHIBIT_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_PROHIBIT_descriptor();
inline const ::std::string& E_PROHIBIT_Name(E_PROHIBIT value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_PROHIBIT_descriptor(), value);
}
inline bool E_PROHIBIT_Parse(
    const ::std::string& name, E_PROHIBIT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_PROHIBIT>(
    E_PROHIBIT_descriptor(), name, value);
}
// ===================================================================

class user_base_info : public ::google::protobuf::Message {
 public:
  user_base_info();
  virtual ~user_base_info();

  user_base_info(const user_base_info& from);

  inline user_base_info& operator=(const user_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_base_info& default_instance();

  void Swap(user_base_info* other);

  // implements Message ----------------------------------------------

  user_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_base_info& from);
  void MergeFrom(const user_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 app_type = 2;
  inline bool has_app_type() const;
  inline void clear_app_type();
  static const int kAppTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 app_type() const;
  inline void set_app_type(::google::protobuf::uint32 value);

  // optional uint32 client_type = 3;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 client_type() const;
  inline void set_client_type(::google::protobuf::uint32 value);

  // optional string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string avatar_url = 5;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 5;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // optional uint32 role = 6;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 6;
  inline ::google::protobuf::uint32 role() const;
  inline void set_role(::google::protobuf::uint32 value);

  // optional string login_ip = 7;
  inline bool has_login_ip() const;
  inline void clear_login_ip();
  static const int kLoginIpFieldNumber = 7;
  inline const ::std::string& login_ip() const;
  inline void set_login_ip(const ::std::string& value);
  inline void set_login_ip(const char* value);
  inline void set_login_ip(const char* value, size_t size);
  inline ::std::string* mutable_login_ip();
  inline ::std::string* release_login_ip();
  inline void set_allocated_login_ip(::std::string* login_ip);

  // optional uint32 prohibit = 8;
  inline bool has_prohibit() const;
  inline void clear_prohibit();
  static const int kProhibitFieldNumber = 8;
  inline ::google::protobuf::uint32 prohibit() const;
  inline void set_prohibit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_base_info)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_app_type();
  inline void clear_has_app_type();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_login_ip();
  inline void clear_has_login_ip();
  inline void set_has_prohibit();
  inline void clear_has_prohibit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 app_type_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 client_type_;
  ::google::protobuf::uint32 role_;
  ::std::string* avatar_url_;
  ::std::string* login_ip_;
  ::google::protobuf::uint32 prohibit_;
  friend void  protobuf_AddDesc_user_5fbase_5finfo_2eproto();
  friend void protobuf_AssignDesc_user_5fbase_5finfo_2eproto();
  friend void protobuf_ShutdownFile_user_5fbase_5finfo_2eproto();

  void InitAsDefaultInstance();
  static user_base_info* default_instance_;
};
// ===================================================================


// ===================================================================

// user_base_info

// required uint32 uid = 1;
inline bool user_base_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_base_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_base_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_base_info::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 user_base_info::uid() const {
  // @@protoc_insertion_point(field_get:user_base_info.uid)
  return uid_;
}
inline void user_base_info::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:user_base_info.uid)
}

// optional uint32 app_type = 2;
inline bool user_base_info::has_app_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_base_info::set_has_app_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_base_info::clear_has_app_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_base_info::clear_app_type() {
  app_type_ = 0u;
  clear_has_app_type();
}
inline ::google::protobuf::uint32 user_base_info::app_type() const {
  // @@protoc_insertion_point(field_get:user_base_info.app_type)
  return app_type_;
}
inline void user_base_info::set_app_type(::google::protobuf::uint32 value) {
  set_has_app_type();
  app_type_ = value;
  // @@protoc_insertion_point(field_set:user_base_info.app_type)
}

// optional uint32 client_type = 3;
inline bool user_base_info::has_client_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_base_info::set_has_client_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_base_info::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_base_info::clear_client_type() {
  client_type_ = 0u;
  clear_has_client_type();
}
inline ::google::protobuf::uint32 user_base_info::client_type() const {
  // @@protoc_insertion_point(field_get:user_base_info.client_type)
  return client_type_;
}
inline void user_base_info::set_client_type(::google::protobuf::uint32 value) {
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:user_base_info.client_type)
}

// optional string nickname = 4;
inline bool user_base_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_base_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_base_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_base_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& user_base_info::nickname() const {
  // @@protoc_insertion_point(field_get:user_base_info.nickname)
  return *nickname_;
}
inline void user_base_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:user_base_info.nickname)
}
inline void user_base_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:user_base_info.nickname)
}
inline void user_base_info::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:user_base_info.nickname)
}
inline ::std::string* user_base_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:user_base_info.nickname)
  return nickname_;
}
inline ::std::string* user_base_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_base_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:user_base_info.nickname)
}

// optional string avatar_url = 5;
inline bool user_base_info::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_base_info::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_base_info::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_base_info::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& user_base_info::avatar_url() const {
  // @@protoc_insertion_point(field_get:user_base_info.avatar_url)
  return *avatar_url_;
}
inline void user_base_info::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:user_base_info.avatar_url)
}
inline void user_base_info::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:user_base_info.avatar_url)
}
inline void user_base_info::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:user_base_info.avatar_url)
}
inline ::std::string* user_base_info::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:user_base_info.avatar_url)
  return avatar_url_;
}
inline ::std::string* user_base_info::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_base_info::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:user_base_info.avatar_url)
}

// optional uint32 role = 6;
inline bool user_base_info::has_role() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_base_info::set_has_role() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_base_info::clear_has_role() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_base_info::clear_role() {
  role_ = 0u;
  clear_has_role();
}
inline ::google::protobuf::uint32 user_base_info::role() const {
  // @@protoc_insertion_point(field_get:user_base_info.role)
  return role_;
}
inline void user_base_info::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:user_base_info.role)
}

// optional string login_ip = 7;
inline bool user_base_info::has_login_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_base_info::set_has_login_ip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_base_info::clear_has_login_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_base_info::clear_login_ip() {
  if (login_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ip_->clear();
  }
  clear_has_login_ip();
}
inline const ::std::string& user_base_info::login_ip() const {
  // @@protoc_insertion_point(field_get:user_base_info.login_ip)
  return *login_ip_;
}
inline void user_base_info::set_login_ip(const ::std::string& value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
  // @@protoc_insertion_point(field_set:user_base_info.login_ip)
}
inline void user_base_info::set_login_ip(const char* value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:user_base_info.login_ip)
}
inline void user_base_info::set_login_ip(const char* value, size_t size) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:user_base_info.login_ip)
}
inline ::std::string* user_base_info::mutable_login_ip() {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:user_base_info.login_ip)
  return login_ip_;
}
inline ::std::string* user_base_info::release_login_ip() {
  clear_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_ip_;
    login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_base_info::set_allocated_login_ip(::std::string* login_ip) {
  if (login_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_ip_;
  }
  if (login_ip) {
    set_has_login_ip();
    login_ip_ = login_ip;
  } else {
    clear_has_login_ip();
    login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:user_base_info.login_ip)
}

// optional uint32 prohibit = 8;
inline bool user_base_info::has_prohibit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_base_info::set_has_prohibit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_base_info::clear_has_prohibit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_base_info::clear_prohibit() {
  prohibit_ = 0u;
  clear_has_prohibit();
}
inline ::google::protobuf::uint32 user_base_info::prohibit() const {
  // @@protoc_insertion_point(field_get:user_base_info.prohibit)
  return prohibit_;
}
inline void user_base_info::set_prohibit(::google::protobuf::uint32 value) {
  set_has_prohibit();
  prohibit_ = value;
  // @@protoc_insertion_point(field_set:user_base_info.prohibit)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::E_PROHIBIT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_PROHIBIT>() {
  return ::E_PROHIBIT_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fbase_5finfo_2eproto__INCLUDED
