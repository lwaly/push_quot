// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBody_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  MsgBody_descriptor_ = file->message_type(0);
  static const int MsgBody_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, additional_),
  };
  MsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBody_descriptor_,
      MsgBody::default_instance_,
      MsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBody));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBody_descriptor_, &MsgBody::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete MsgBody::default_instance_;
  delete MsgBody_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\"P\n\007MsgBody\022\014\n\004body\030\001 \002(\014\022\022\n\n"
    "session_id\030\002 \001(\r\022\017\n\007session\030\003 \001(\t\022\022\n\nadd"
    "itional\030\004 \001(\014", 93);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  MsgBody::default_instance_ = new MsgBody();
  MsgBody::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgBody::kBodyFieldNumber;
const int MsgBody::kSessionIdFieldNumber;
const int MsgBody::kSessionFieldNumber;
const int MsgBody::kAdditionalFieldNumber;
#endif  // !_MSC_VER

MsgBody::MsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBody)
}

void MsgBody::InitAsDefaultInstance() {
}

MsgBody::MsgBody(const MsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBody)
}

void MsgBody::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_ = 0u;
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additional_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBody::~MsgBody() {
  // @@protoc_insertion_point(destructor:MsgBody)
  SharedDtor();
}

void MsgBody::SharedDtor() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_;
  }
  if (additional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additional_;
  }
  if (this != default_instance_) {
  }
}

void MsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBody_descriptor_;
}

const MsgBody& MsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MsgBody* MsgBody::default_instance_ = NULL;

MsgBody* MsgBody::New() const {
  return new MsgBody;
}

void MsgBody::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
    session_id_ = 0u;
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_->clear();
      }
    }
    if (has_additional()) {
      if (additional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additional_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes body = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session;
        break;
      }

      // optional string session = 3;
      case 3: {
        if (tag == 26) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_additional;
        break;
      }

      // optional bytes additional = 4;
      case 4: {
        if (tag == 34) {
         parse_additional:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_additional()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBody)
  return false;
#undef DO_
}

void MsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBody)
  // required bytes body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->body(), output);
  }

  // optional uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // optional string session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session(), output);
  }

  // optional bytes additional = 4;
  if (has_additional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->additional(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBody)
}

::google::protobuf::uint8* MsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBody)
  // required bytes body = 1;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->body(), target);
  }

  // optional uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // optional string session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session(), target);
  }

  // optional bytes additional = 4;
  if (has_additional()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->additional(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBody)
  return target;
}

int MsgBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional string session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }

    // optional bytes additional = 4;
    if (has_additional()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->additional());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBody::MergeFrom(const MsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_additional()) {
      set_additional(from.additional());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBody::CopyFrom(const MsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgBody::Swap(MsgBody* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    std::swap(session_id_, other->session_id_);
    std::swap(session_, other->session_);
    std::swap(additional_, other->additional_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBody_descriptor_;
  metadata.reflection = MsgBody_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
