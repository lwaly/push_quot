// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_base_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_base_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* user_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_base_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* E_PROHIBIT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_5fbase_5finfo_2eproto() {
  protobuf_AddDesc_user_5fbase_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user_base_info.proto");
  GOOGLE_CHECK(file != NULL);
  user_base_info_descriptor_ = file->message_type(0);
  static const int user_base_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, app_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, prohibit_),
  };
  user_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_base_info_descriptor_,
      user_base_info::default_instance_,
      user_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_base_info));
  E_PROHIBIT_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_5fbase_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_base_info_descriptor_, &user_base_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_5fbase_5finfo_2eproto() {
  delete user_base_info::default_instance_;
  delete user_base_info_reflection_;
}

void protobuf_AddDesc_user_5fbase_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024user_base_info.proto\"\234\001\n\016user_base_inf"
    "o\022\013\n\003uid\030\001 \002(\r\022\020\n\010app_type\030\002 \001(\r\022\023\n\013clie"
    "nt_type\030\003 \001(\r\022\020\n\010nickname\030\004 \001(\t\022\022\n\navata"
    "r_url\030\005 \001(\t\022\014\n\004role\030\006 \001(\r\022\020\n\010login_ip\030\007 "
    "\001(\t\022\020\n\010prohibit\030\010 \001(\r*\033\n\nE_PROHIBIT\022\r\n\tB"
    "AN_LOGIN\020\001", 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_base_info.proto", &protobuf_RegisterTypes);
  user_base_info::default_instance_ = new user_base_info();
  user_base_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_5fbase_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_5fbase_5finfo_2eproto {
  StaticDescriptorInitializer_user_5fbase_5finfo_2eproto() {
    protobuf_AddDesc_user_5fbase_5finfo_2eproto();
  }
} static_descriptor_initializer_user_5fbase_5finfo_2eproto_;
const ::google::protobuf::EnumDescriptor* E_PROHIBIT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PROHIBIT_descriptor_;
}
bool E_PROHIBIT_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int user_base_info::kUidFieldNumber;
const int user_base_info::kAppTypeFieldNumber;
const int user_base_info::kClientTypeFieldNumber;
const int user_base_info::kNicknameFieldNumber;
const int user_base_info::kAvatarUrlFieldNumber;
const int user_base_info::kRoleFieldNumber;
const int user_base_info::kLoginIpFieldNumber;
const int user_base_info::kProhibitFieldNumber;
#endif  // !_MSC_VER

user_base_info::user_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_base_info)
}

void user_base_info::InitAsDefaultInstance() {
}

user_base_info::user_base_info(const user_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_base_info)
}

void user_base_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  app_type_ = 0u;
  client_type_ = 0u;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = 0u;
  login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prohibit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_base_info::~user_base_info() {
  // @@protoc_insertion_point(destructor:user_base_info)
  SharedDtor();
}

void user_base_info::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (login_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_ip_;
  }
  if (this != default_instance_) {
  }
}

void user_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_base_info_descriptor_;
}

const user_base_info& user_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fbase_5finfo_2eproto();
  return *default_instance_;
}

user_base_info* user_base_info::default_instance_ = NULL;

user_base_info* user_base_info::New() const {
  return new user_base_info;
}

void user_base_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_base_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, app_type_);
    ZR_(client_type_, role_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    if (has_login_ip()) {
      if (login_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_ip_->clear();
      }
    }
    prohibit_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_base_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_app_type;
        break;
      }

      // optional uint32 app_type = 2;
      case 2: {
        if (tag == 16) {
         parse_app_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_type_)));
          set_has_app_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_type;
        break;
      }

      // optional uint32 client_type = 3;
      case 3: {
        if (tag == 24) {
         parse_client_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_type_)));
          set_has_client_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_role;
        break;
      }

      // optional uint32 role = 6;
      case 6: {
        if (tag == 48) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_login_ip;
        break;
      }

      // optional string login_ip = 7;
      case 7: {
        if (tag == 58) {
         parse_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_ip().data(), this->login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_prohibit;
        break;
      }

      // optional uint32 prohibit = 8;
      case 8: {
        if (tag == 64) {
         parse_prohibit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prohibit_)));
          set_has_prohibit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_base_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_base_info)
  return false;
#undef DO_
}

void user_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_base_info)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 app_type = 2;
  if (has_app_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_type(), output);
  }

  // optional uint32 client_type = 3;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_type(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional string avatar_url = 5;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar_url(), output);
  }

  // optional uint32 role = 6;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role(), output);
  }

  // optional string login_ip = 7;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->login_ip(), output);
  }

  // optional uint32 prohibit = 8;
  if (has_prohibit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->prohibit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_base_info)
}

::google::protobuf::uint8* user_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_base_info)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 app_type = 2;
  if (has_app_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_type(), target);
  }

  // optional uint32 client_type = 3;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_type(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional string avatar_url = 5;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar_url(), target);
  }

  // optional uint32 role = 6;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role(), target);
  }

  // optional string login_ip = 7;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->login_ip(), target);
  }

  // optional uint32 prohibit = 8;
  if (has_prohibit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->prohibit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_base_info)
  return target;
}

int user_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 app_type = 2;
    if (has_app_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_type());
    }

    // optional uint32 client_type = 3;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_type());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string avatar_url = 5;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // optional uint32 role = 6;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional string login_ip = 7;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_ip());
    }

    // optional uint32 prohibit = 8;
    if (has_prohibit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prohibit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_base_info::MergeFrom(const user_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_app_type()) {
      set_app_type(from.app_type());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
    if (from.has_prohibit()) {
      set_prohibit(from.prohibit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_base_info::CopyFrom(const user_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_base_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void user_base_info::Swap(user_base_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(app_type_, other->app_type_);
    std::swap(client_type_, other->client_type_);
    std::swap(nickname_, other->nickname_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(role_, other->role_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(prohibit_, other->prohibit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_base_info_descriptor_;
  metadata.reflection = user_base_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
